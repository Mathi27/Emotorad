
EMotorad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dc8  08004dc8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004dc8  08004dc8  00014dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dd0  08004dd0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dd0  08004dd0  00014dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dd4  08004dd4  00014dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00012e04  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012e18  20012e18  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e385  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002567  00000000  00000000  0002e40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ed0  00000000  00000000  00030978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b65  00000000  00000000  00031848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f95b  00000000  00000000  000323ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000101f9  00000000  00000000  00051d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c69f5  00000000  00000000  00061f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003d4c  00000000  00000000  001288f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0012c644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d38 	.word	0x08004d38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08004d38 	.word	0x08004d38

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <lcd_enable>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Send Enable Pulse to latch the data/command
void lcd_enable(void) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET); // EN High
 80004d0:	2201      	movs	r2, #1
 80004d2:	2102      	movs	r1, #2
 80004d4:	4807      	ldr	r0, [pc, #28]	; (80004f4 <lcd_enable+0x28>)
 80004d6:	f000 ffbb 	bl	8001450 <HAL_GPIO_WritePin>
    LCD_DELAY;
 80004da:	2005      	movs	r0, #5
 80004dc:	f000 fcfe 	bl	8000edc <HAL_Delay>
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET); // EN Low
 80004e0:	2200      	movs	r2, #0
 80004e2:	2102      	movs	r1, #2
 80004e4:	4803      	ldr	r0, [pc, #12]	; (80004f4 <lcd_enable+0x28>)
 80004e6:	f000 ffb3 	bl	8001450 <HAL_GPIO_WritePin>
    LCD_DELAY;
 80004ea:	2005      	movs	r0, #5
 80004ec:	f000 fcf6 	bl	8000edc <HAL_Delay>
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40020000 	.word	0x40020000

080004f8 <lcd_send_nibble>:

// Send 4 bits to the LCD
void lcd_send_nibble(uint8_t nibble) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (nibble >> 0) & 0x01);
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	f003 0301 	and.w	r3, r3, #1
 8000508:	b2db      	uxtb	r3, r3
 800050a:	461a      	mov	r2, r3
 800050c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000510:	4816      	ldr	r0, [pc, #88]	; (800056c <lcd_send_nibble+0x74>)
 8000512:	f000 ff9d 	bl	8001450 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (nibble >> 1) & 0x01);
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	085b      	lsrs	r3, r3, #1
 800051a:	b2db      	uxtb	r3, r3
 800051c:	f003 0301 	and.w	r3, r3, #1
 8000520:	b2db      	uxtb	r3, r3
 8000522:	461a      	mov	r2, r3
 8000524:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000528:	4810      	ldr	r0, [pc, #64]	; (800056c <lcd_send_nibble+0x74>)
 800052a:	f000 ff91 	bl	8001450 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (nibble >> 2) & 0x01);
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	089b      	lsrs	r3, r3, #2
 8000532:	b2db      	uxtb	r3, r3
 8000534:	f003 0301 	and.w	r3, r3, #1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	461a      	mov	r2, r3
 800053c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000540:	480a      	ldr	r0, [pc, #40]	; (800056c <lcd_send_nibble+0x74>)
 8000542:	f000 ff85 	bl	8001450 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (nibble >> 3) & 0x01);
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	08db      	lsrs	r3, r3, #3
 800054a:	b2db      	uxtb	r3, r3
 800054c:	f003 0301 	and.w	r3, r3, #1
 8000550:	b2db      	uxtb	r3, r3
 8000552:	461a      	mov	r2, r3
 8000554:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000558:	4804      	ldr	r0, [pc, #16]	; (800056c <lcd_send_nibble+0x74>)
 800055a:	f000 ff79 	bl	8001450 <HAL_GPIO_WritePin>
    lcd_enable();
 800055e:	f7ff ffb5 	bl	80004cc <lcd_enable>
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40020400 	.word	0x40020400

08000570 <lcd_send>:

// Send Command or Data (RS low for command, RS high for data)
void lcd_send(uint8_t data, uint8_t rs) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	460a      	mov	r2, r1
 800057a:	71fb      	strb	r3, [r7, #7]
 800057c:	4613      	mov	r3, r2
 800057e:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, rs); // Set RS
 8000580:	79bb      	ldrb	r3, [r7, #6]
 8000582:	461a      	mov	r2, r3
 8000584:	2101      	movs	r1, #1
 8000586:	480a      	ldr	r0, [pc, #40]	; (80005b0 <lcd_send+0x40>)
 8000588:	f000 ff62 	bl	8001450 <HAL_GPIO_WritePin>

    // Send upper nibble
    lcd_send_nibble(data >> 4);
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	091b      	lsrs	r3, r3, #4
 8000590:	b2db      	uxtb	r3, r3
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ffb0 	bl	80004f8 <lcd_send_nibble>
    // Send lower nibble
    lcd_send_nibble(data & 0x0F);
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	f003 030f 	and.w	r3, r3, #15
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff ffa9 	bl	80004f8 <lcd_send_nibble>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020000 	.word	0x40020000

080005b4 <lcd_send_command>:

// Send Command
void lcd_send_command(uint8_t command) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
    lcd_send(command, 0); // RS = 0 for command
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff ffd4 	bl	8000570 <lcd_send>
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <lcd_send_data>:

// Send Data
void lcd_send_data(uint8_t data) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
    lcd_send(data, 1); // RS = 1 for data
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2101      	movs	r1, #1
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ffc6 	bl	8000570 <lcd_send>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <lcd_init>:

void lcd_init(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	  HAL_Delay(50);
 80005f0:	2032      	movs	r0, #50	; 0x32
 80005f2:	f000 fc73 	bl	8000edc <HAL_Delay>

	  // Initialize LCD in 4-bit mode
	     lcd_send_nibble(0x03); // Send 0x03 three times (reset sequence)
 80005f6:	2003      	movs	r0, #3
 80005f8:	f7ff ff7e 	bl	80004f8 <lcd_send_nibble>
	     HAL_Delay(5);
 80005fc:	2005      	movs	r0, #5
 80005fe:	f000 fc6d 	bl	8000edc <HAL_Delay>
	     lcd_send_nibble(0x03);
 8000602:	2003      	movs	r0, #3
 8000604:	f7ff ff78 	bl	80004f8 <lcd_send_nibble>
	     HAL_Delay(1);
 8000608:	2001      	movs	r0, #1
 800060a:	f000 fc67 	bl	8000edc <HAL_Delay>
	     lcd_send_nibble(0x03);
 800060e:	2003      	movs	r0, #3
 8000610:	f7ff ff72 	bl	80004f8 <lcd_send_nibble>
	     lcd_send_nibble(0x02); // Set to 4-bit mode
 8000614:	2002      	movs	r0, #2
 8000616:	f7ff ff6f 	bl	80004f8 <lcd_send_nibble>

	     // Now configure LCD
	     lcd_send_command(0x28); // 4-bit mode, 2 lines, 5x7 format
 800061a:	2028      	movs	r0, #40	; 0x28
 800061c:	f7ff ffca 	bl	80005b4 <lcd_send_command>
	     HAL_Delay(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f000 fc5b 	bl	8000edc <HAL_Delay>
	     lcd_send_command(0x0C); // Display ON, cursor OFF
 8000626:	200c      	movs	r0, #12
 8000628:	f7ff ffc4 	bl	80005b4 <lcd_send_command>
	     HAL_Delay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f000 fc55 	bl	8000edc <HAL_Delay>
	     lcd_send_command(0x01); // Clear display
 8000632:	2001      	movs	r0, #1
 8000634:	f7ff ffbe 	bl	80005b4 <lcd_send_command>
	     HAL_Delay(2);
 8000638:	2002      	movs	r0, #2
 800063a:	f000 fc4f 	bl	8000edc <HAL_Delay>
	     lcd_send_command(0x06); // Entry mode, auto-increment cursor
 800063e:	2006      	movs	r0, #6
 8000640:	f7ff ffb8 	bl	80005b4 <lcd_send_command>
	     HAL_Delay(1);
 8000644:	2001      	movs	r0, #1
 8000646:	f000 fc49 	bl	8000edc <HAL_Delay>
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}

0800064e <lcd_clear>:

// Clear LCD display
void lcd_clear(void) {
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
    lcd_send_command(0x01);  // Clear display
 8000652:	2001      	movs	r0, #1
 8000654:	f7ff ffae 	bl	80005b4 <lcd_send_command>
    HAL_Delay(2);            // Wait for the clear operation
 8000658:	2002      	movs	r0, #2
 800065a:	f000 fc3f 	bl	8000edc <HAL_Delay>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}

08000662 <lcd_set_cursor>:

// Set cursor position (row: 0 or 1, col: 0-15)
void lcd_set_cursor(uint8_t row, uint8_t col) {
 8000662:	b580      	push	{r7, lr}
 8000664:	b084      	sub	sp, #16
 8000666:	af00      	add	r7, sp, #0
 8000668:	4603      	mov	r3, r0
 800066a:	460a      	mov	r2, r1
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	4613      	mov	r3, r2
 8000670:	71bb      	strb	r3, [r7, #6]
    uint8_t address = (row == 0) ? col : (0x40 + col);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d003      	beq.n	8000680 <lcd_set_cursor+0x1e>
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	3340      	adds	r3, #64	; 0x40
 800067c:	b2db      	uxtb	r3, r3
 800067e:	e000      	b.n	8000682 <lcd_set_cursor+0x20>
 8000680:	79bb      	ldrb	r3, [r7, #6]
 8000682:	73fb      	strb	r3, [r7, #15]
    lcd_send_command(0x80 | address);  // Set DDRAM address command
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff91 	bl	80005b4 <lcd_send_command>
}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <lcd_send_string>:

// Send string to LCD
void lcd_send_string(char *str) {
 800069a:	b580      	push	{r7, lr}
 800069c:	b082      	sub	sp, #8
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
    while (*str) {
 80006a2:	e006      	b.n	80006b2 <lcd_send_string+0x18>
        lcd_send_data(*str++);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	1c5a      	adds	r2, r3, #1
 80006a8:	607a      	str	r2, [r7, #4]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff8f 	bl	80005d0 <lcd_send_data>
    while (*str) {
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1f4      	bne.n	80006a4 <lcd_send_string+0xa>
    }
}
 80006ba:	bf00      	nop
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f000 fbc5 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ce:	f000 f843 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 f89f 	bl	8000814 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 80006d6:	f7ff ff89 	bl	80005ec <lcd_init>
   /* Semaphore Creation */
  buttonSemaphore = xSemaphoreCreateBinary();
 80006da:	2203      	movs	r2, #3
 80006dc:	2100      	movs	r1, #0
 80006de:	2001      	movs	r0, #1
 80006e0:	f001 ff22 	bl	8002528 <xQueueGenericCreate>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a14      	ldr	r2, [pc, #80]	; (8000738 <main+0x74>)
 80006e8:	6013      	str	r3, [r2, #0]
  lcdMutex = xSemaphoreCreateMutex();
 80006ea:	2001      	movs	r0, #1
 80006ec:	f001 ffa7 	bl	800263e <xQueueCreateMutex>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <main+0x78>)
 80006f4:	6013      	str	r3, [r2, #0]

  /* Create the tasks */
  xTaskCreate(vTaskButtonRead, "ButtonRead", 128, NULL, 1, NULL);
 80006f6:	2300      	movs	r3, #0
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	2301      	movs	r3, #1
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2300      	movs	r3, #0
 8000700:	2280      	movs	r2, #128	; 0x80
 8000702:	490f      	ldr	r1, [pc, #60]	; (8000740 <main+0x7c>)
 8000704:	480f      	ldr	r0, [pc, #60]	; (8000744 <main+0x80>)
 8000706:	f002 fc39 	bl	8002f7c <xTaskCreate>
  xTaskCreate(vTaskLEDControl, "LEDControl", 128, NULL, 1, NULL);
 800070a:	2300      	movs	r3, #0
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	2301      	movs	r3, #1
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2300      	movs	r3, #0
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	490c      	ldr	r1, [pc, #48]	; (8000748 <main+0x84>)
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <main+0x88>)
 800071a:	f002 fc2f 	bl	8002f7c <xTaskCreate>
  xTaskCreate(vTaskLCDUpdate,"LCDUpdate",128,NULL,1,NULL);
 800071e:	2300      	movs	r3, #0
 8000720:	9301      	str	r3, [sp, #4]
 8000722:	2301      	movs	r3, #1
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	2300      	movs	r3, #0
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	4909      	ldr	r1, [pc, #36]	; (8000750 <main+0x8c>)
 800072c:	4809      	ldr	r0, [pc, #36]	; (8000754 <main+0x90>)
 800072e:	f002 fc25 	bl	8002f7c <xTaskCreate>

   /* Start the scheduler */
  vTaskStartScheduler();
 8000732:	f002 fdc1 	bl	80032b8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000736:	e7fe      	b.n	8000736 <main+0x72>
 8000738:	20000030 	.word	0x20000030
 800073c:	20000034 	.word	0x20000034
 8000740:	08004d50 	.word	0x08004d50
 8000744:	08000941 	.word	0x08000941
 8000748:	08004d5c 	.word	0x08004d5c
 800074c:	08000a19 	.word	0x08000a19
 8000750:	08004d68 	.word	0x08004d68
 8000754:	08000b2d 	.word	0x08000b2d

08000758 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	; 0x50
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	2230      	movs	r2, #48	; 0x30
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f004 faac 	bl	8004cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <SystemClock_Config+0xb4>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	4a21      	ldr	r2, [pc, #132]	; (800080c <SystemClock_Config+0xb4>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078a:	6413      	str	r3, [r2, #64]	; 0x40
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <SystemClock_Config+0xb4>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <SystemClock_Config+0xb8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a1b      	ldr	r2, [pc, #108]	; (8000810 <SystemClock_Config+0xb8>)
 80007a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b19      	ldr	r3, [pc, #100]	; (8000810 <SystemClock_Config+0xb8>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b4:	2302      	movs	r3, #2
 80007b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b8:	2301      	movs	r3, #1
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007bc:	2310      	movs	r3, #16
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 0320 	add.w	r3, r7, #32
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fe75 	bl	80014b8 <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007d4:	f000 fa3a 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	230f      	movs	r3, #15
 80007da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 f8d8 	bl	80019a8 <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007fe:	f000 fa25 	bl	8000c4c <Error_Handler>
  }
}
 8000802:	bf00      	nop
 8000804:	3750      	adds	r7, #80	; 0x50
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	40007000 	.word	0x40007000

08000814 <MX_GPIO_Init>:
  * @param None
  * @retval None
  */

static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b40      	ldr	r3, [pc, #256]	; (8000930 <MX_GPIO_Init+0x11c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a3f      	ldr	r2, [pc, #252]	; (8000930 <MX_GPIO_Init+0x11c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b3d      	ldr	r3, [pc, #244]	; (8000930 <MX_GPIO_Init+0x11c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b39      	ldr	r3, [pc, #228]	; (8000930 <MX_GPIO_Init+0x11c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a38      	ldr	r2, [pc, #224]	; (8000930 <MX_GPIO_Init+0x11c>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b36      	ldr	r3, [pc, #216]	; (8000930 <MX_GPIO_Init+0x11c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b32      	ldr	r3, [pc, #200]	; (8000930 <MX_GPIO_Init+0x11c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a31      	ldr	r2, [pc, #196]	; (8000930 <MX_GPIO_Init+0x11c>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b2f      	ldr	r3, [pc, #188]	; (8000930 <MX_GPIO_Init+0x11c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_EN_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2103      	movs	r1, #3
 8000882:	482c      	ldr	r0, [pc, #176]	; (8000934 <MX_GPIO_Init+0x120>)
 8000884:	f000 fde4 	bl	8001450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D4_Pin|LCD_D5_Pin|LED_LCD_D6_Pin|LED4_LCD_D7_Pin
 8000888:	2200      	movs	r2, #0
 800088a:	f24f 0108 	movw	r1, #61448	; 0xf008
 800088e:	482a      	ldr	r0, [pc, #168]	; (8000938 <MX_GPIO_Init+0x124>)
 8000890:	f000 fdde 	bl	8001450 <HAL_GPIO_WritePin>
                          |Switch2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2140      	movs	r1, #64	; 0x40
 8000898:	4828      	ldr	r0, [pc, #160]	; (800093c <MX_GPIO_Init+0x128>)
 800089a:	f000 fdd9 	bl	8001450 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin;
 800089e:	2303      	movs	r3, #3
 80008a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	4619      	mov	r1, r3
 80008b4:	481f      	ldr	r0, [pc, #124]	; (8000934 <MX_GPIO_Init+0x120>)
 80008b6:	f000 fc17 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LED_LCD_D6_Pin LED4_LCD_D7_Pin
                           Switch2_Pin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LED_LCD_D6_Pin|LED4_LCD_D7_Pin
 80008ba:	f24f 0308 	movw	r3, #61448	; 0xf008
 80008be:	60fb      	str	r3, [r7, #12]
                          |Switch2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	4619      	mov	r1, r3
 80008d2:	4819      	ldr	r0, [pc, #100]	; (8000938 <MX_GPIO_Init+0x124>)
 80008d4:	f000 fc08 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80008d8:	2340      	movs	r3, #64	; 0x40
 80008da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4619      	mov	r1, r3
 80008ee:	4813      	ldr	r0, [pc, #76]	; (800093c <MX_GPIO_Init+0x128>)
 80008f0:	f000 fbfa 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch4_Pin */
  GPIO_InitStruct.Pin = Switch4_Pin;
 80008f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Switch4_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	4619      	mov	r1, r3
 8000908:	480a      	ldr	r0, [pc, #40]	; (8000934 <MX_GPIO_Init+0x120>)
 800090a:	f000 fbed 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch3_Pin Switch1_Pin */
  GPIO_InitStruct.Pin = Switch3_Pin|Switch1_Pin;
 800090e:	2390      	movs	r3, #144	; 0x90
 8000910:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_GPIO_Init+0x124>)
 8000922:	f000 fbe1 	bl	80010e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000926:	bf00      	nop
 8000928:	3720      	adds	r7, #32
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40020000 	.word	0x40020000
 8000938:	40020400 	.word	0x40020400
 800093c:	40020800 	.word	0x40020800

08000940 <vTaskButtonRead>:

/* USER CODE BEGIN 4 */
// Task 1: Button Read (100ms)
void vTaskButtonRead(void *pvParameters) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
    uint8_t last_button1_state = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	73fb      	strb	r3, [r7, #15]
    uint8_t last_button2_state = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	73bb      	strb	r3, [r7, #14]

    while (1) {
        // Read the current state of the buttons
        uint8_t current_button1_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);  // Button 1
 8000950:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000954:	482b      	ldr	r0, [pc, #172]	; (8000a04 <vTaskButtonRead+0xc4>)
 8000956:	f000 fd63 	bl	8001420 <HAL_GPIO_ReadPin>
 800095a:	4603      	mov	r3, r0
 800095c:	737b      	strb	r3, [r7, #13]
        uint8_t current_button2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);   // Button 2
 800095e:	2110      	movs	r1, #16
 8000960:	4829      	ldr	r0, [pc, #164]	; (8000a08 <vTaskButtonRead+0xc8>)
 8000962:	f000 fd5d 	bl	8001420 <HAL_GPIO_ReadPin>
 8000966:	4603      	mov	r3, r0
 8000968:	733b      	strb	r3, [r7, #12]

        // Debouncing logic for Button 1
        if (current_button1_state != last_button1_state) {
 800096a:	7b7a      	ldrb	r2, [r7, #13]
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	429a      	cmp	r2, r3
 8000970:	d020      	beq.n	80009b4 <vTaskButtonRead+0x74>
            vTaskDelay(pdMS_TO_TICKS(DEBOUNCE_DELAY));  // Wait for debounce time
 8000972:	2032      	movs	r0, #50	; 0x32
 8000974:	f002 fc6c 	bl	8003250 <vTaskDelay>
            current_button1_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);  // Read button again after delay
 8000978:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800097c:	4821      	ldr	r0, [pc, #132]	; (8000a04 <vTaskButtonRead+0xc4>)
 800097e:	f000 fd4f 	bl	8001420 <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	737b      	strb	r3, [r7, #13]
            if (current_button1_state != last_button1_state) {
 8000986:	7b7a      	ldrb	r2, [r7, #13]
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	429a      	cmp	r2, r3
 800098c:	d012      	beq.n	80009b4 <vTaskButtonRead+0x74>
                last_button1_state = current_button1_state;  // Update the last state
 800098e:	7b7b      	ldrb	r3, [r7, #13]
 8000990:	73fb      	strb	r3, [r7, #15]

                // If button is pressed (assuming active-low logic)
                if (current_button1_state == GPIO_PIN_RESET) {
 8000992:	7b7b      	ldrb	r3, [r7, #13]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d10a      	bne.n	80009ae <vTaskButtonRead+0x6e>
                    button1_state = 1;  // Update shared state variable
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <vTaskButtonRead+0xcc>)
 800099a:	2201      	movs	r2, #1
 800099c:	701a      	strb	r2, [r3, #0]
                    xSemaphoreGive(buttonSemaphore);  // Trigger LED control task
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <vTaskButtonRead+0xd0>)
 80009a0:	6818      	ldr	r0, [r3, #0]
 80009a2:	2300      	movs	r3, #0
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	f001 fe62 	bl	8002670 <xQueueGenericSend>
 80009ac:	e002      	b.n	80009b4 <vTaskButtonRead+0x74>
                } else {
                    button1_state = 0;  // Button released
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <vTaskButtonRead+0xcc>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
                }
            }
        }

        // Debouncing logic for Button 2
        if (current_button2_state != last_button2_state) {
 80009b4:	7b3a      	ldrb	r2, [r7, #12]
 80009b6:	7bbb      	ldrb	r3, [r7, #14]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d01f      	beq.n	80009fc <vTaskButtonRead+0xbc>
            vTaskDelay(pdMS_TO_TICKS(DEBOUNCE_DELAY));  // Wait for debounce time
 80009bc:	2032      	movs	r0, #50	; 0x32
 80009be:	f002 fc47 	bl	8003250 <vTaskDelay>
            current_button2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);  // Read button again after delay
 80009c2:	2110      	movs	r1, #16
 80009c4:	4810      	ldr	r0, [pc, #64]	; (8000a08 <vTaskButtonRead+0xc8>)
 80009c6:	f000 fd2b 	bl	8001420 <HAL_GPIO_ReadPin>
 80009ca:	4603      	mov	r3, r0
 80009cc:	733b      	strb	r3, [r7, #12]
            if (current_button2_state != last_button2_state) {
 80009ce:	7b3a      	ldrb	r2, [r7, #12]
 80009d0:	7bbb      	ldrb	r3, [r7, #14]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d012      	beq.n	80009fc <vTaskButtonRead+0xbc>
                last_button2_state = current_button2_state;  // Update the last state
 80009d6:	7b3b      	ldrb	r3, [r7, #12]
 80009d8:	73bb      	strb	r3, [r7, #14]

                // If button is pressed (assuming active-low logic)
                if (current_button2_state == GPIO_PIN_RESET) {
 80009da:	7b3b      	ldrb	r3, [r7, #12]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d10a      	bne.n	80009f6 <vTaskButtonRead+0xb6>
                    button2_state = 1;  // Update shared state variable
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <vTaskButtonRead+0xd4>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
                    xSemaphoreGive(buttonSemaphore);  // Trigger LED control task
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <vTaskButtonRead+0xd0>)
 80009e8:	6818      	ldr	r0, [r3, #0]
 80009ea:	2300      	movs	r3, #0
 80009ec:	2200      	movs	r2, #0
 80009ee:	2100      	movs	r1, #0
 80009f0:	f001 fe3e 	bl	8002670 <xQueueGenericSend>
 80009f4:	e002      	b.n	80009fc <vTaskButtonRead+0xbc>
                } else {
                    button2_state = 0;  // Button released
 80009f6:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <vTaskButtonRead+0xd4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
                }
            }
        }

        // Small delay to avoid CPU hogging
        vTaskDelay(pdMS_TO_TICKS(100));  // Check buttons every 100ms
 80009fc:	2064      	movs	r0, #100	; 0x64
 80009fe:	f002 fc27 	bl	8003250 <vTaskDelay>
    while (1) {
 8000a02:	e7a5      	b.n	8000950 <vTaskButtonRead+0x10>
 8000a04:	40020000 	.word	0x40020000
 8000a08:	40020400 	.word	0x40020400
 8000a0c:	20000038 	.word	0x20000038
 8000a10:	20000030 	.word	0x20000030
 8000a14:	20000039 	.word	0x20000039

08000a18 <vTaskLEDControl>:
    }
}

// Task 2: LED Control
void vTaskLEDControl(void *pvParameters) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
    while (1) {
        // Wait for semaphore from button read task
        if (xSemaphoreTake(buttonSemaphore, portMAX_DELAY) == pdTRUE) {
 8000a20:	4b3d      	ldr	r3, [pc, #244]	; (8000b18 <vTaskLEDControl+0x100>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f001 ffff 	bl	8002a2c <xQueueSemaphoreTake>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d13b      	bne.n	8000aac <vTaskLEDControl+0x94>

            // If both buttons are pressed, maintain the LED state
            if (button1_state == 1 && button2_state == 1) {
 8000a34:	4b39      	ldr	r3, [pc, #228]	; (8000b1c <vTaskLEDControl+0x104>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d104      	bne.n	8000a48 <vTaskLEDControl+0x30>
 8000a3e:	4b38      	ldr	r3, [pc, #224]	; (8000b20 <vTaskLEDControl+0x108>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d060      	beq.n	8000b0a <vTaskLEDControl+0xf2>
                // Both buttons pressed - Do nothing to keep LEDs in the same state
                continue;
            }

            // If button 1 is pressed (Red LED ON) - keep it ON until released
            if (button1_state == 1) {
 8000a48:	4b34      	ldr	r3, [pc, #208]	; (8000b1c <vTaskLEDControl+0x104>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d112      	bne.n	8000a78 <vTaskLEDControl+0x60>
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);   // Red LED ON (PC6)
 8000a52:	2201      	movs	r2, #1
 8000a54:	2140      	movs	r1, #64	; 0x40
 8000a56:	4833      	ldr	r0, [pc, #204]	; (8000b24 <vTaskLEDControl+0x10c>)
 8000a58:	f000 fcfa 	bl	8001450 <HAL_GPIO_WritePin>

                // Wait until button 1 is released before turning off
                while (button1_state == 1) {
 8000a5c:	e002      	b.n	8000a64 <vTaskLEDControl+0x4c>
                    vTaskDelay(pdMS_TO_TICKS(50)); // Poll every 50ms
 8000a5e:	2032      	movs	r0, #50	; 0x32
 8000a60:	f002 fbf6 	bl	8003250 <vTaskDelay>
                while (button1_state == 1) {
 8000a64:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <vTaskLEDControl+0x104>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d0f7      	beq.n	8000a5e <vTaskLEDControl+0x46>
                }
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET); // Red LED OFF when released
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2140      	movs	r1, #64	; 0x40
 8000a72:	482c      	ldr	r0, [pc, #176]	; (8000b24 <vTaskLEDControl+0x10c>)
 8000a74:	f000 fcec 	bl	8001450 <HAL_GPIO_WritePin>
            }

            // If button 2 is pressed (Green LED ON) - keep it ON until released
            if (button2_state == 1) {
 8000a78:	4b29      	ldr	r3, [pc, #164]	; (8000b20 <vTaskLEDControl+0x108>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d114      	bne.n	8000aac <vTaskLEDControl+0x94>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);  // Green LED ON (PB13)
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a88:	4827      	ldr	r0, [pc, #156]	; (8000b28 <vTaskLEDControl+0x110>)
 8000a8a:	f000 fce1 	bl	8001450 <HAL_GPIO_WritePin>

                // Wait until button 2 is released before turning off
                while (button2_state == 1) {
 8000a8e:	e002      	b.n	8000a96 <vTaskLEDControl+0x7e>
                    vTaskDelay(pdMS_TO_TICKS(50)); // Poll every 50ms
 8000a90:	2032      	movs	r0, #50	; 0x32
 8000a92:	f002 fbdd 	bl	8003250 <vTaskDelay>
                while (button2_state == 1) {
 8000a96:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <vTaskLEDControl+0x108>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d0f7      	beq.n	8000a90 <vTaskLEDControl+0x78>
                }
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // Green LED OFF when released
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa6:	4820      	ldr	r0, [pc, #128]	; (8000b28 <vTaskLEDControl+0x110>)
 8000aa8:	f000 fcd2 	bl	8001450 <HAL_GPIO_WritePin>
            }
        }

        // If no buttons are pressed, start LED toggling
        if (button1_state == 0 && button2_state == 0) {
 8000aac:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <vTaskLEDControl+0x104>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1b4      	bne.n	8000a20 <vTaskLEDControl+0x8>
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <vTaskLEDControl+0x108>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d1af      	bne.n	8000a20 <vTaskLEDControl+0x8>
            // Toggle Red LED
            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);   // Toggle Red LED (PC6)
 8000ac0:	2140      	movs	r1, #64	; 0x40
 8000ac2:	4818      	ldr	r0, [pc, #96]	; (8000b24 <vTaskLEDControl+0x10c>)
 8000ac4:	f000 fcdd 	bl	8001482 <HAL_GPIO_TogglePin>
            vTaskDelay(pdMS_TO_TICKS(500));          // 500ms delay for Red LED
 8000ac8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000acc:	f002 fbc0 	bl	8003250 <vTaskDelay>

            // Check for button press before toggling Green LED
            if (button1_state == 1 || button2_state == 1) {
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <vTaskLEDControl+0x104>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d019      	beq.n	8000b0e <vTaskLEDControl+0xf6>
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <vTaskLEDControl+0x108>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d014      	beq.n	8000b0e <vTaskLEDControl+0xf6>
                continue;  // Exit toggling if any button is pressed
            }

            // Toggle Green LED
            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);  // Toggle Green LED (PB13)
 8000ae4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae8:	480f      	ldr	r0, [pc, #60]	; (8000b28 <vTaskLEDControl+0x110>)
 8000aea:	f000 fcca 	bl	8001482 <HAL_GPIO_TogglePin>
            vTaskDelay(pdMS_TO_TICKS(500));          // 500ms delay for Green LED
 8000aee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af2:	f002 fbad 	bl	8003250 <vTaskDelay>

            // Check for button press again
            if (button1_state == 1 || button2_state == 1) {
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <vTaskLEDControl+0x104>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d008      	beq.n	8000b12 <vTaskLEDControl+0xfa>
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <vTaskLEDControl+0x108>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	e78a      	b.n	8000a20 <vTaskLEDControl+0x8>
                continue;
 8000b0a:	bf00      	nop
 8000b0c:	e788      	b.n	8000a20 <vTaskLEDControl+0x8>
                continue;  // Exit toggling if any button is pressed
 8000b0e:	bf00      	nop
 8000b10:	e786      	b.n	8000a20 <vTaskLEDControl+0x8>
                continue;  // Exit toggling if any button is pressed
 8000b12:	bf00      	nop
        if (xSemaphoreTake(buttonSemaphore, portMAX_DELAY) == pdTRUE) {
 8000b14:	e784      	b.n	8000a20 <vTaskLEDControl+0x8>
 8000b16:	bf00      	nop
 8000b18:	20000030 	.word	0x20000030
 8000b1c:	20000038 	.word	0x20000038
 8000b20:	20000039 	.word	0x20000039
 8000b24:	40020800 	.word	0x40020800
 8000b28:	40020400 	.word	0x40020400

08000b2c <vTaskLCDUpdate>:
        }
    }
}// Task 3: LCD Update


void vTaskLCDUpdate(void *pvParameters) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
    // Previous states to track changes
    uint8_t prev_button1_state = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]
    uint8_t prev_button2_state = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73bb      	strb	r3, [r7, #14]
    uint8_t prev_led_red_state = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	737b      	strb	r3, [r7, #13]
    uint8_t prev_led_green_state = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	733b      	strb	r3, [r7, #12]

    while (1) {
        // Check if states have changed
        if (button1_state != prev_button1_state || button2_state != prev_button2_state ||
 8000b44:	4b2f      	ldr	r3, [pc, #188]	; (8000c04 <vTaskLCDUpdate+0xd8>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	7bfa      	ldrb	r2, [r7, #15]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d111      	bne.n	8000b74 <vTaskLCDUpdate+0x48>
 8000b50:	4b2d      	ldr	r3, [pc, #180]	; (8000c08 <vTaskLCDUpdate+0xdc>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	7bba      	ldrb	r2, [r7, #14]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d10b      	bne.n	8000b74 <vTaskLCDUpdate+0x48>
            led_red_state != prev_led_red_state || led_green_state != prev_led_green_state) {
 8000b5c:	4b2b      	ldr	r3, [pc, #172]	; (8000c0c <vTaskLCDUpdate+0xe0>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b2db      	uxtb	r3, r3
        if (button1_state != prev_button1_state || button2_state != prev_button2_state ||
 8000b62:	7b7a      	ldrb	r2, [r7, #13]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d105      	bne.n	8000b74 <vTaskLCDUpdate+0x48>
            led_red_state != prev_led_red_state || led_green_state != prev_led_green_state) {
 8000b68:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <vTaskLCDUpdate+0xe4>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	7b3a      	ldrb	r2, [r7, #12]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d042      	beq.n	8000bfa <vTaskLCDUpdate+0xce>

            // Acquire mutex before updating LCD
            if (xSemaphoreTake(lcdMutex, portMAX_DELAY) == pdTRUE) {
 8000b74:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <vTaskLCDUpdate+0xe8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f001 ff55 	bl	8002a2c <xQueueSemaphoreTake>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d12c      	bne.n	8000be2 <vTaskLCDUpdate+0xb6>
                lcd_clear();  // Clear only if something changed
 8000b88:	f7ff fd61 	bl	800064e <lcd_clear>
                lcd_set_cursor(0, 0);
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff fd67 	bl	8000662 <lcd_set_cursor>
                lcd_send_string("BT 1: ");
 8000b94:	4820      	ldr	r0, [pc, #128]	; (8000c18 <vTaskLCDUpdate+0xec>)
 8000b96:	f7ff fd80 	bl	800069a <lcd_send_string>
                lcd_send_string(button1_state ? "Pressed" : "Released");
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <vTaskLCDUpdate+0xd8>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <vTaskLCDUpdate+0x7c>
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <vTaskLCDUpdate+0xf0>)
 8000ba6:	e000      	b.n	8000baa <vTaskLCDUpdate+0x7e>
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <vTaskLCDUpdate+0xf4>)
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fd75 	bl	800069a <lcd_send_string>

                lcd_set_cursor(1, 0);
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f7ff fd55 	bl	8000662 <lcd_set_cursor>
                lcd_send_string("BT 2: ");
 8000bb8:	481a      	ldr	r0, [pc, #104]	; (8000c24 <vTaskLCDUpdate+0xf8>)
 8000bba:	f7ff fd6e 	bl	800069a <lcd_send_string>
                lcd_send_string(button2_state ? "Pressed" : "Released");
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <vTaskLCDUpdate+0xdc>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <vTaskLCDUpdate+0xa0>
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <vTaskLCDUpdate+0xf0>)
 8000bca:	e000      	b.n	8000bce <vTaskLCDUpdate+0xa2>
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <vTaskLCDUpdate+0xf4>)
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fd63 	bl	800069a <lcd_send_string>

                xSemaphoreGive(lcdMutex);  // Release mutex
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <vTaskLCDUpdate+0xe8>)
 8000bd6:	6818      	ldr	r0, [r3, #0]
 8000bd8:	2300      	movs	r3, #0
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	f001 fd47 	bl	8002670 <xQueueGenericSend>
            }

            // Update previous states
            prev_button1_state = button1_state;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <vTaskLCDUpdate+0xd8>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	73fb      	strb	r3, [r7, #15]
            prev_button2_state = button2_state;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <vTaskLCDUpdate+0xdc>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	73bb      	strb	r3, [r7, #14]
            prev_led_red_state = led_red_state;
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <vTaskLCDUpdate+0xe0>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	737b      	strb	r3, [r7, #13]
            prev_led_green_state = led_green_state;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <vTaskLCDUpdate+0xe4>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	733b      	strb	r3, [r7, #12]
        }

        // Add delay to avoid rapid updates
        vTaskDelay(100 / portTICK_PERIOD_MS);
 8000bfa:	2064      	movs	r0, #100	; 0x64
 8000bfc:	f002 fb28 	bl	8003250 <vTaskDelay>
        if (button1_state != prev_button1_state || button2_state != prev_button2_state ||
 8000c00:	e7a0      	b.n	8000b44 <vTaskLCDUpdate+0x18>
 8000c02:	bf00      	nop
 8000c04:	20000038 	.word	0x20000038
 8000c08:	20000039 	.word	0x20000039
 8000c0c:	2000003a 	.word	0x2000003a
 8000c10:	2000003b 	.word	0x2000003b
 8000c14:	20000034 	.word	0x20000034
 8000c18:	08004d74 	.word	0x08004d74
 8000c1c:	08004d7c 	.word	0x08004d7c
 8000c20:	08004d84 	.word	0x08004d84
 8000c24:	08004d90 	.word	0x08004d90

08000c28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d101      	bne.n	8000c3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c3a:	f000 f92f 	bl	8000e9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40001000 	.word	0x40001000

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <Error_Handler+0x8>
	...

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	; 0x38
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	4b33      	ldr	r3, [pc, #204]	; (8000d8c <HAL_InitTick+0xe4>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	4a32      	ldr	r2, [pc, #200]	; (8000d8c <HAL_InitTick+0xe4>)
 8000cc2:	f043 0310 	orr.w	r3, r3, #16
 8000cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc8:	4b30      	ldr	r3, [pc, #192]	; (8000d8c <HAL_InitTick+0xe4>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	f003 0310 	and.w	r3, r3, #16
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cd4:	f107 0210 	add.w	r2, r7, #16
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 f82e 	bl	8001d40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ce4:	6a3b      	ldr	r3, [r7, #32]
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d103      	bne.n	8000cf6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cee:	f001 f813 	bl	8001d18 <HAL_RCC_GetPCLK1Freq>
 8000cf2:	6378      	str	r0, [r7, #52]	; 0x34
 8000cf4:	e004      	b.n	8000d00 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cf6:	f001 f80f 	bl	8001d18 <HAL_RCC_GetPCLK1Freq>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d02:	4a23      	ldr	r2, [pc, #140]	; (8000d90 <HAL_InitTick+0xe8>)
 8000d04:	fba2 2303 	umull	r2, r3, r2, r3
 8000d08:	0c9b      	lsrs	r3, r3, #18
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d0e:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <HAL_InitTick+0xec>)
 8000d10:	4a21      	ldr	r2, [pc, #132]	; (8000d98 <HAL_InitTick+0xf0>)
 8000d12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <HAL_InitTick+0xec>)
 8000d16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d1a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d1c:	4a1d      	ldr	r2, [pc, #116]	; (8000d94 <HAL_InitTick+0xec>)
 8000d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d20:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d22:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <HAL_InitTick+0xec>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <HAL_InitTick+0xec>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <HAL_InitTick+0xec>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d34:	4817      	ldr	r0, [pc, #92]	; (8000d94 <HAL_InitTick+0xec>)
 8000d36:	f001 f835 	bl	8001da4 <HAL_TIM_Base_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d11b      	bne.n	8000d80 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d48:	4812      	ldr	r0, [pc, #72]	; (8000d94 <HAL_InitTick+0xec>)
 8000d4a:	f001 f885 	bl	8001e58 <HAL_TIM_Base_Start_IT>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d111      	bne.n	8000d80 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d5c:	2036      	movs	r0, #54	; 0x36
 8000d5e:	f000 f9b5 	bl	80010cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	d808      	bhi.n	8000d7a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	2036      	movs	r0, #54	; 0x36
 8000d6e:	f000 f991 	bl	8001094 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <HAL_InitTick+0xf4>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	e002      	b.n	8000d80 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3738      	adds	r7, #56	; 0x38
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	431bde83 	.word	0x431bde83
 8000d94:	2000003c 	.word	0x2000003c
 8000d98:	40001000 	.word	0x40001000
 8000d9c:	20000004 	.word	0x20000004

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <TIM6_DAC_IRQHandler+0x10>)
 8000dd2:	f001 f8b1 	bl	8001f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000003c 	.word	0x2000003c

08000de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <SystemInit+0x20>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <SystemInit+0x20>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e08:	f7ff ffea 	bl	8000de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e0e:	490d      	ldr	r1, [pc, #52]	; (8000e44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e24:	4c0a      	ldr	r4, [pc, #40]	; (8000e50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e32:	f003 ff4f 	bl	8004cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e36:	f7ff fc45 	bl	80006c4 <main>
  bx  lr    
 8000e3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e48:	08004dd8 	.word	0x08004dd8
  ldr r2, =_sbss
 8000e4c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e50:	20012e18 	.word	0x20012e18

08000e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <HAL_Init+0x40>)
 8000e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_Init+0x40>)
 8000e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_Init+0x40>)
 8000e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 f8fc 	bl	800107e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e86:	200f      	movs	r0, #15
 8000e88:	f7ff ff0e 	bl	8000ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8c:	f7ff fee4 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023c00 	.word	0x40023c00

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000084 	.word	0x20000084

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000084 	.word	0x20000084

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff ffee 	bl	8000ec4 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_Delay+0x44>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f02:	bf00      	nop
 8000f04:	f7ff ffde 	bl	8000ec4 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008

08000f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f56:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	60d3      	str	r3, [r2, #12]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <__NVIC_GetPriorityGrouping+0x18>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	f003 0307 	and.w	r3, r3, #7
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	db0b      	blt.n	8000fb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f003 021f 	and.w	r2, r3, #31
 8000fa0:	4907      	ldr	r1, [pc, #28]	; (8000fc0 <__NVIC_EnableIRQ+0x38>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	2001      	movs	r0, #1
 8000faa:	fa00 f202 	lsl.w	r2, r0, r2
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e100 	.word	0xe000e100

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	; (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	; (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	; 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
         );
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	; 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ff4c 	bl	8000f24 <__NVIC_SetPriorityGrouping>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a6:	f7ff ff61 	bl	8000f6c <__NVIC_GetPriorityGrouping>
 80010aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	68b9      	ldr	r1, [r7, #8]
 80010b0:	6978      	ldr	r0, [r7, #20]
 80010b2:	f7ff ffb1 	bl	8001018 <NVIC_EncodePriority>
 80010b6:	4602      	mov	r2, r0
 80010b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010bc:	4611      	mov	r1, r2
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff80 	bl	8000fc4 <__NVIC_SetPriority>
}
 80010c4:	bf00      	nop
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff54 	bl	8000f88 <__NVIC_EnableIRQ>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	e16b      	b.n	80013dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001104:	2201      	movs	r2, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	429a      	cmp	r2, r3
 800111e:	f040 815a 	bne.w	80013d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d005      	beq.n	800113a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001136:	2b02      	cmp	r3, #2
 8001138:	d130      	bne.n	800119c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001170:	2201      	movs	r2, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	f003 0201 	and.w	r2, r3, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d017      	beq.n	80011d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d123      	bne.n	800122c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	08da      	lsrs	r2, r3, #3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3208      	adds	r2, #8
 80011ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	220f      	movs	r2, #15
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	691a      	ldr	r2, [r3, #16]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	08da      	lsrs	r2, r3, #3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3208      	adds	r2, #8
 8001226:	69b9      	ldr	r1, [r7, #24]
 8001228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0203 	and.w	r2, r3, #3
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80b4 	beq.w	80013d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b60      	ldr	r3, [pc, #384]	; (80013f4 <HAL_GPIO_Init+0x30c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a5f      	ldr	r2, [pc, #380]	; (80013f4 <HAL_GPIO_Init+0x30c>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b5d      	ldr	r3, [pc, #372]	; (80013f4 <HAL_GPIO_Init+0x30c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800128a:	4a5b      	ldr	r2, [pc, #364]	; (80013f8 <HAL_GPIO_Init+0x310>)
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3302      	adds	r3, #2
 8001292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	220f      	movs	r2, #15
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a52      	ldr	r2, [pc, #328]	; (80013fc <HAL_GPIO_Init+0x314>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d02b      	beq.n	800130e <HAL_GPIO_Init+0x226>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a51      	ldr	r2, [pc, #324]	; (8001400 <HAL_GPIO_Init+0x318>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d025      	beq.n	800130a <HAL_GPIO_Init+0x222>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a50      	ldr	r2, [pc, #320]	; (8001404 <HAL_GPIO_Init+0x31c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d01f      	beq.n	8001306 <HAL_GPIO_Init+0x21e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4f      	ldr	r2, [pc, #316]	; (8001408 <HAL_GPIO_Init+0x320>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d019      	beq.n	8001302 <HAL_GPIO_Init+0x21a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4e      	ldr	r2, [pc, #312]	; (800140c <HAL_GPIO_Init+0x324>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d013      	beq.n	80012fe <HAL_GPIO_Init+0x216>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4d      	ldr	r2, [pc, #308]	; (8001410 <HAL_GPIO_Init+0x328>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d00d      	beq.n	80012fa <HAL_GPIO_Init+0x212>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4c      	ldr	r2, [pc, #304]	; (8001414 <HAL_GPIO_Init+0x32c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d007      	beq.n	80012f6 <HAL_GPIO_Init+0x20e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4b      	ldr	r2, [pc, #300]	; (8001418 <HAL_GPIO_Init+0x330>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d101      	bne.n	80012f2 <HAL_GPIO_Init+0x20a>
 80012ee:	2307      	movs	r3, #7
 80012f0:	e00e      	b.n	8001310 <HAL_GPIO_Init+0x228>
 80012f2:	2308      	movs	r3, #8
 80012f4:	e00c      	b.n	8001310 <HAL_GPIO_Init+0x228>
 80012f6:	2306      	movs	r3, #6
 80012f8:	e00a      	b.n	8001310 <HAL_GPIO_Init+0x228>
 80012fa:	2305      	movs	r3, #5
 80012fc:	e008      	b.n	8001310 <HAL_GPIO_Init+0x228>
 80012fe:	2304      	movs	r3, #4
 8001300:	e006      	b.n	8001310 <HAL_GPIO_Init+0x228>
 8001302:	2303      	movs	r3, #3
 8001304:	e004      	b.n	8001310 <HAL_GPIO_Init+0x228>
 8001306:	2302      	movs	r3, #2
 8001308:	e002      	b.n	8001310 <HAL_GPIO_Init+0x228>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <HAL_GPIO_Init+0x228>
 800130e:	2300      	movs	r3, #0
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	f002 0203 	and.w	r2, r2, #3
 8001316:	0092      	lsls	r2, r2, #2
 8001318:	4093      	lsls	r3, r2
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001320:	4935      	ldr	r1, [pc, #212]	; (80013f8 <HAL_GPIO_Init+0x310>)
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	089b      	lsrs	r3, r3, #2
 8001326:	3302      	adds	r3, #2
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132e:	4b3b      	ldr	r3, [pc, #236]	; (800141c <HAL_GPIO_Init+0x334>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001352:	4a32      	ldr	r2, [pc, #200]	; (800141c <HAL_GPIO_Init+0x334>)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001358:	4b30      	ldr	r3, [pc, #192]	; (800141c <HAL_GPIO_Init+0x334>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800137c:	4a27      	ldr	r2, [pc, #156]	; (800141c <HAL_GPIO_Init+0x334>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001382:	4b26      	ldr	r3, [pc, #152]	; (800141c <HAL_GPIO_Init+0x334>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013a6:	4a1d      	ldr	r2, [pc, #116]	; (800141c <HAL_GPIO_Init+0x334>)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_GPIO_Init+0x334>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013d0:	4a12      	ldr	r2, [pc, #72]	; (800141c <HAL_GPIO_Init+0x334>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3301      	adds	r3, #1
 80013da:	61fb      	str	r3, [r7, #28]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	2b0f      	cmp	r3, #15
 80013e0:	f67f ae90 	bls.w	8001104 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40013800 	.word	0x40013800
 80013fc:	40020000 	.word	0x40020000
 8001400:	40020400 	.word	0x40020400
 8001404:	40020800 	.word	0x40020800
 8001408:	40020c00 	.word	0x40020c00
 800140c:	40021000 	.word	0x40021000
 8001410:	40021400 	.word	0x40021400
 8001414:	40021800 	.word	0x40021800
 8001418:	40021c00 	.word	0x40021c00
 800141c:	40013c00 	.word	0x40013c00

08001420 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	887b      	ldrh	r3, [r7, #2]
 8001432:	4013      	ands	r3, r2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d002      	beq.n	800143e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001438:	2301      	movs	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	e001      	b.n	8001442 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001442:	7bfb      	ldrb	r3, [r7, #15]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	807b      	strh	r3, [r7, #2]
 800145c:	4613      	mov	r3, r2
 800145e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001460:	787b      	ldrb	r3, [r7, #1]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800146c:	e003      	b.n	8001476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	041a      	lsls	r2, r3, #16
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	619a      	str	r2, [r3, #24]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001482:	b480      	push	{r7}
 8001484:	b085      	sub	sp, #20
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001494:	887a      	ldrh	r2, [r7, #2]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4013      	ands	r3, r2
 800149a:	041a      	lsls	r2, r3, #16
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	43d9      	mvns	r1, r3
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	400b      	ands	r3, r1
 80014a4:	431a      	orrs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	619a      	str	r2, [r3, #24]
}
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e267      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d075      	beq.n	80015c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014d6:	4b88      	ldr	r3, [pc, #544]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
 80014de:	2b04      	cmp	r3, #4
 80014e0:	d00c      	beq.n	80014fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e2:	4b85      	ldr	r3, [pc, #532]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d112      	bne.n	8001514 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ee:	4b82      	ldr	r3, [pc, #520]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014fa:	d10b      	bne.n	8001514 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fc:	4b7e      	ldr	r3, [pc, #504]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d05b      	beq.n	80015c0 <HAL_RCC_OscConfig+0x108>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d157      	bne.n	80015c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e242      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151c:	d106      	bne.n	800152c <HAL_RCC_OscConfig+0x74>
 800151e:	4b76      	ldr	r3, [pc, #472]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a75      	ldr	r2, [pc, #468]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e01d      	b.n	8001568 <HAL_RCC_OscConfig+0xb0>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001534:	d10c      	bne.n	8001550 <HAL_RCC_OscConfig+0x98>
 8001536:	4b70      	ldr	r3, [pc, #448]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a6f      	ldr	r2, [pc, #444]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 800153c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	4b6d      	ldr	r3, [pc, #436]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a6c      	ldr	r2, [pc, #432]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e00b      	b.n	8001568 <HAL_RCC_OscConfig+0xb0>
 8001550:	4b69      	ldr	r3, [pc, #420]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a68      	ldr	r2, [pc, #416]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b66      	ldr	r3, [pc, #408]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a65      	ldr	r2, [pc, #404]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d013      	beq.n	8001598 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fca8 	bl	8000ec4 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff fca4 	bl	8000ec4 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	; 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e207      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	4b5b      	ldr	r3, [pc, #364]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0xc0>
 8001596:	e014      	b.n	80015c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff fc94 	bl	8000ec4 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a0:	f7ff fc90 	bl	8000ec4 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b64      	cmp	r3, #100	; 0x64
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e1f3      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	4b51      	ldr	r3, [pc, #324]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0xe8>
 80015be:	e000      	b.n	80015c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d063      	beq.n	8001696 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015ce:	4b4a      	ldr	r3, [pc, #296]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00b      	beq.n	80015f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015da:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d11c      	bne.n	8001620 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015e6:	4b44      	ldr	r3, [pc, #272]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d116      	bne.n	8001620 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f2:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d005      	beq.n	800160a <HAL_RCC_OscConfig+0x152>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d001      	beq.n	800160a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e1c7      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160a:	4b3b      	ldr	r3, [pc, #236]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4937      	ldr	r1, [pc, #220]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161e:	e03a      	b.n	8001696 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d020      	beq.n	800166a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001628:	4b34      	ldr	r3, [pc, #208]	; (80016fc <HAL_RCC_OscConfig+0x244>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162e:	f7ff fc49 	bl	8000ec4 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001636:	f7ff fc45 	bl	8000ec4 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e1a8      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001648:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001654:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4925      	ldr	r1, [pc, #148]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001664:	4313      	orrs	r3, r2
 8001666:	600b      	str	r3, [r1, #0]
 8001668:	e015      	b.n	8001696 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800166a:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_RCC_OscConfig+0x244>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff fc28 	bl	8000ec4 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001678:	f7ff fc24 	bl	8000ec4 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e187      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d036      	beq.n	8001710 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d016      	beq.n	80016d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_RCC_OscConfig+0x248>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7ff fc08 	bl	8000ec4 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b8:	f7ff fc04 	bl	8000ec4 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e167      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80016cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0x200>
 80016d6:	e01b      	b.n	8001710 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_RCC_OscConfig+0x248>)
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016de:	f7ff fbf1 	bl	8000ec4 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e4:	e00e      	b.n	8001704 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e6:	f7ff fbed 	bl	8000ec4 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d907      	bls.n	8001704 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e150      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
 80016f8:	40023800 	.word	0x40023800
 80016fc:	42470000 	.word	0x42470000
 8001700:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001704:	4b88      	ldr	r3, [pc, #544]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1ea      	bne.n	80016e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 8097 	beq.w	800184c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001722:	4b81      	ldr	r3, [pc, #516]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10f      	bne.n	800174e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	4b7d      	ldr	r3, [pc, #500]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a7c      	ldr	r2, [pc, #496]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
 800173e:	4b7a      	ldr	r3, [pc, #488]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174a:	2301      	movs	r3, #1
 800174c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174e:	4b77      	ldr	r3, [pc, #476]	; (800192c <HAL_RCC_OscConfig+0x474>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d118      	bne.n	800178c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175a:	4b74      	ldr	r3, [pc, #464]	; (800192c <HAL_RCC_OscConfig+0x474>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a73      	ldr	r2, [pc, #460]	; (800192c <HAL_RCC_OscConfig+0x474>)
 8001760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001766:	f7ff fbad 	bl	8000ec4 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176e:	f7ff fba9 	bl	8000ec4 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e10c      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001780:	4b6a      	ldr	r3, [pc, #424]	; (800192c <HAL_RCC_OscConfig+0x474>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_OscConfig+0x2ea>
 8001794:	4b64      	ldr	r3, [pc, #400]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001798:	4a63      	ldr	r2, [pc, #396]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6713      	str	r3, [r2, #112]	; 0x70
 80017a0:	e01c      	b.n	80017dc <HAL_RCC_OscConfig+0x324>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b05      	cmp	r3, #5
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x30c>
 80017aa:	4b5f      	ldr	r3, [pc, #380]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ae:	4a5e      	ldr	r2, [pc, #376]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6713      	str	r3, [r2, #112]	; 0x70
 80017b6:	4b5c      	ldr	r3, [pc, #368]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ba:	4a5b      	ldr	r2, [pc, #364]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6713      	str	r3, [r2, #112]	; 0x70
 80017c2:	e00b      	b.n	80017dc <HAL_RCC_OscConfig+0x324>
 80017c4:	4b58      	ldr	r3, [pc, #352]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c8:	4a57      	ldr	r2, [pc, #348]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	6713      	str	r3, [r2, #112]	; 0x70
 80017d0:	4b55      	ldr	r3, [pc, #340]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d4:	4a54      	ldr	r2, [pc, #336]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017d6:	f023 0304 	bic.w	r3, r3, #4
 80017da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d015      	beq.n	8001810 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e4:	f7ff fb6e 	bl	8000ec4 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ea:	e00a      	b.n	8001802 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ec:	f7ff fb6a 	bl	8000ec4 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e0cb      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001802:	4b49      	ldr	r3, [pc, #292]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0ee      	beq.n	80017ec <HAL_RCC_OscConfig+0x334>
 800180e:	e014      	b.n	800183a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001810:	f7ff fb58 	bl	8000ec4 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001816:	e00a      	b.n	800182e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001818:	f7ff fb54 	bl	8000ec4 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f241 3288 	movw	r2, #5000	; 0x1388
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e0b5      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182e:	4b3e      	ldr	r3, [pc, #248]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1ee      	bne.n	8001818 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800183a:	7dfb      	ldrb	r3, [r7, #23]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d105      	bne.n	800184c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001840:	4b39      	ldr	r3, [pc, #228]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	4a38      	ldr	r2, [pc, #224]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800184a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 80a1 	beq.w	8001998 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001856:	4b34      	ldr	r3, [pc, #208]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b08      	cmp	r3, #8
 8001860:	d05c      	beq.n	800191c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d141      	bne.n	80018ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186a:	4b31      	ldr	r3, [pc, #196]	; (8001930 <HAL_RCC_OscConfig+0x478>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fb28 	bl	8000ec4 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff fb24 	bl	8000ec4 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e087      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188a:	4b27      	ldr	r3, [pc, #156]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69da      	ldr	r2, [r3, #28]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	019b      	lsls	r3, r3, #6
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	085b      	lsrs	r3, r3, #1
 80018ae:	3b01      	subs	r3, #1
 80018b0:	041b      	lsls	r3, r3, #16
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	061b      	lsls	r3, r3, #24
 80018ba:	491b      	ldr	r1, [pc, #108]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <HAL_RCC_OscConfig+0x478>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c6:	f7ff fafd 	bl	8000ec4 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ce:	f7ff faf9 	bl	8000ec4 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e05c      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x416>
 80018ec:	e054      	b.n	8001998 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <HAL_RCC_OscConfig+0x478>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fae6 	bl	8000ec4 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fc:	f7ff fae2 	bl	8000ec4 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e045      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x444>
 800191a:	e03d      	b.n	8001998 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d107      	bne.n	8001934 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e038      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
 8001928:	40023800 	.word	0x40023800
 800192c:	40007000 	.word	0x40007000
 8001930:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <HAL_RCC_OscConfig+0x4ec>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d028      	beq.n	8001994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800194c:	429a      	cmp	r2, r3
 800194e:	d121      	bne.n	8001994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195a:	429a      	cmp	r2, r3
 800195c:	d11a      	bne.n	8001994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001964:	4013      	ands	r3, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800196a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800196c:	4293      	cmp	r3, r2
 800196e:	d111      	bne.n	8001994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197a:	085b      	lsrs	r3, r3, #1
 800197c:	3b01      	subs	r3, #1
 800197e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d107      	bne.n	8001994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001990:	429a      	cmp	r2, r3
 8001992:	d001      	beq.n	8001998 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800

080019a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0cc      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b68      	ldr	r3, [pc, #416]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d90c      	bls.n	80019e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b65      	ldr	r3, [pc, #404]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	4b63      	ldr	r3, [pc, #396]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0b8      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d020      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019fc:	4b59      	ldr	r3, [pc, #356]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4a58      	ldr	r2, [pc, #352]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a14:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	4a52      	ldr	r2, [pc, #328]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a20:	4b50      	ldr	r3, [pc, #320]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	494d      	ldr	r1, [pc, #308]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d044      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d119      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e07f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d003      	beq.n	8001a66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e06f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e067      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a86:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f023 0203 	bic.w	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4934      	ldr	r1, [pc, #208]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a98:	f7ff fa14 	bl	8000ec4 <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa0:	f7ff fa10 	bl	8000ec4 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e04f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 020c 	and.w	r2, r3, #12
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1eb      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d20c      	bcs.n	8001af0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e032      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d008      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4916      	ldr	r1, [pc, #88]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d009      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	490e      	ldr	r1, [pc, #56]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b2e:	f000 f821 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8001b32:	4602      	mov	r2, r0
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	490a      	ldr	r1, [pc, #40]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	5ccb      	ldrb	r3, [r1, r3]
 8001b42:	fa22 f303 	lsr.w	r3, r2, r3
 8001b46:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f8aa 	bl	8000ca8 <HAL_InitTick>

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023c00 	.word	0x40023c00
 8001b64:	40023800 	.word	0x40023800
 8001b68:	08004db0 	.word	0x08004db0
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	20000004 	.word	0x20000004

08001b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b78:	b090      	sub	sp, #64	; 0x40
 8001b7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b8c:	4b59      	ldr	r3, [pc, #356]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 030c 	and.w	r3, r3, #12
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d00d      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x40>
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	f200 80a1 	bhi.w	8001ce0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d003      	beq.n	8001bae <HAL_RCC_GetSysClockFreq+0x3a>
 8001ba6:	e09b      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba8:	4b53      	ldr	r3, [pc, #332]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001baa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bac:	e09b      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bae:	4b53      	ldr	r3, [pc, #332]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x188>)
 8001bb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bb2:	e098      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb4:	4b4f      	ldr	r3, [pc, #316]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bbc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bbe:	4b4d      	ldr	r3, [pc, #308]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d028      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bca:	4b4a      	ldr	r3, [pc, #296]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	099b      	lsrs	r3, r3, #6
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	623b      	str	r3, [r7, #32]
 8001bd4:	627a      	str	r2, [r7, #36]	; 0x24
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4b47      	ldr	r3, [pc, #284]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x188>)
 8001be0:	fb03 f201 	mul.w	r2, r3, r1
 8001be4:	2300      	movs	r3, #0
 8001be6:	fb00 f303 	mul.w	r3, r0, r3
 8001bea:	4413      	add	r3, r2
 8001bec:	4a43      	ldr	r2, [pc, #268]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x188>)
 8001bee:	fba0 1202 	umull	r1, r2, r0, r2
 8001bf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bf4:	460a      	mov	r2, r1
 8001bf6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bfa:	4413      	add	r3, r2
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c00:	2200      	movs	r2, #0
 8001c02:	61bb      	str	r3, [r7, #24]
 8001c04:	61fa      	str	r2, [r7, #28]
 8001c06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c0e:	f7fe fadf 	bl	80001d0 <__aeabi_uldivmod>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4613      	mov	r3, r2
 8001c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c1a:	e053      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c1c:	4b35      	ldr	r3, [pc, #212]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	099b      	lsrs	r3, r3, #6
 8001c22:	2200      	movs	r2, #0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	617a      	str	r2, [r7, #20]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c2e:	f04f 0b00 	mov.w	fp, #0
 8001c32:	4652      	mov	r2, sl
 8001c34:	465b      	mov	r3, fp
 8001c36:	f04f 0000 	mov.w	r0, #0
 8001c3a:	f04f 0100 	mov.w	r1, #0
 8001c3e:	0159      	lsls	r1, r3, #5
 8001c40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c44:	0150      	lsls	r0, r2, #5
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	ebb2 080a 	subs.w	r8, r2, sl
 8001c4e:	eb63 090b 	sbc.w	r9, r3, fp
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c66:	ebb2 0408 	subs.w	r4, r2, r8
 8001c6a:	eb63 0509 	sbc.w	r5, r3, r9
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	00eb      	lsls	r3, r5, #3
 8001c78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c7c:	00e2      	lsls	r2, r4, #3
 8001c7e:	4614      	mov	r4, r2
 8001c80:	461d      	mov	r5, r3
 8001c82:	eb14 030a 	adds.w	r3, r4, sl
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	eb45 030b 	adc.w	r3, r5, fp
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	028b      	lsls	r3, r1, #10
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ca4:	4621      	mov	r1, r4
 8001ca6:	028a      	lsls	r2, r1, #10
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	60fa      	str	r2, [r7, #12]
 8001cb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cb8:	f7fe fa8a 	bl	80001d0 <__aeabi_uldivmod>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	0c1b      	lsrs	r3, r3, #16
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	3301      	adds	r3, #1
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001cd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cdc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cde:	e002      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ce2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3740      	adds	r7, #64	; 0x40
 8001cec:	46bd      	mov	sp, r7
 8001cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	00f42400 	.word	0x00f42400
 8001cfc:	017d7840 	.word	0x017d7840

08001d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000000 	.word	0x20000000

08001d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d1c:	f7ff fff0 	bl	8001d00 <HAL_RCC_GetHCLKFreq>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	0a9b      	lsrs	r3, r3, #10
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	4903      	ldr	r1, [pc, #12]	; (8001d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d2e:	5ccb      	ldrb	r3, [r1, r3]
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	08004dc0 	.word	0x08004dc0

08001d40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_RCC_GetClockConfig+0x5c>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0203 	and.w	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <HAL_RCC_GetClockConfig+0x5c>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_RCC_GetClockConfig+0x5c>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_RCC_GetClockConfig+0x5c>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	08db      	lsrs	r3, r3, #3
 8001d7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d82:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <HAL_RCC_GetClockConfig+0x60>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0207 	and.w	r2, r3, #7
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	601a      	str	r2, [r3, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40023c00 	.word	0x40023c00

08001da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e041      	b.n	8001e3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d106      	bne.n	8001dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f839 	bl	8001e42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3304      	adds	r3, #4
 8001de0:	4619      	mov	r1, r3
 8001de2:	4610      	mov	r0, r2
 8001de4:	f000 f9c0 	bl	8002168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d001      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e04e      	b.n	8001f0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a23      	ldr	r2, [pc, #140]	; (8001f1c <HAL_TIM_Base_Start_IT+0xc4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d022      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x80>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e9a:	d01d      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x80>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1f      	ldr	r2, [pc, #124]	; (8001f20 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d018      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x80>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a1e      	ldr	r2, [pc, #120]	; (8001f24 <HAL_TIM_Base_Start_IT+0xcc>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d013      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x80>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1c      	ldr	r2, [pc, #112]	; (8001f28 <HAL_TIM_Base_Start_IT+0xd0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00e      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x80>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a1b      	ldr	r2, [pc, #108]	; (8001f2c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d009      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x80>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a19      	ldr	r2, [pc, #100]	; (8001f30 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d004      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x80>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a18      	ldr	r2, [pc, #96]	; (8001f34 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d111      	bne.n	8001efc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d010      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 0201 	orr.w	r2, r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001efa:	e007      	b.n	8001f0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40010000 	.word	0x40010000
 8001f20:	40000400 	.word	0x40000400
 8001f24:	40000800 	.word	0x40000800
 8001f28:	40000c00 	.word	0x40000c00
 8001f2c:	40010400 	.word	0x40010400
 8001f30:	40014000 	.word	0x40014000
 8001f34:	40001800 	.word	0x40001800

08001f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d020      	beq.n	8001f9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d01b      	beq.n	8001f9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0202 	mvn.w	r2, #2
 8001f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f8d2 	bl	800212c <HAL_TIM_IC_CaptureCallback>
 8001f88:	e005      	b.n	8001f96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f8c4 	bl	8002118 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f8d5 	bl	8002140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d020      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01b      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0204 	mvn.w	r2, #4
 8001fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f8ac 	bl	800212c <HAL_TIM_IC_CaptureCallback>
 8001fd4:	e005      	b.n	8001fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f89e 	bl	8002118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f8af 	bl	8002140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d020      	beq.n	8002034 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01b      	beq.n	8002034 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0208 	mvn.w	r2, #8
 8002004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2204      	movs	r2, #4
 800200a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f886 	bl	800212c <HAL_TIM_IC_CaptureCallback>
 8002020:	e005      	b.n	800202e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f878 	bl	8002118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f889 	bl	8002140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	d020      	beq.n	8002080 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	2b00      	cmp	r3, #0
 8002046:	d01b      	beq.n	8002080 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0210 	mvn.w	r2, #16
 8002050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2208      	movs	r2, #8
 8002056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f860 	bl	800212c <HAL_TIM_IC_CaptureCallback>
 800206c:	e005      	b.n	800207a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f852 	bl	8002118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f863 	bl	8002140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00c      	beq.n	80020a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d007      	beq.n	80020a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0201 	mvn.w	r2, #1
 800209c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7fe fdc2 	bl	8000c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00c      	beq.n	80020c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d007      	beq.n	80020c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f906 	bl	80022d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00c      	beq.n	80020ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d007      	beq.n	80020ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f834 	bl	8002154 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00c      	beq.n	8002110 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d007      	beq.n	8002110 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0220 	mvn.w	r2, #32
 8002108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f8d8 	bl	80022c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a46      	ldr	r2, [pc, #280]	; (8002294 <TIM_Base_SetConfig+0x12c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d013      	beq.n	80021a8 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002186:	d00f      	beq.n	80021a8 <TIM_Base_SetConfig+0x40>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a43      	ldr	r2, [pc, #268]	; (8002298 <TIM_Base_SetConfig+0x130>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00b      	beq.n	80021a8 <TIM_Base_SetConfig+0x40>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a42      	ldr	r2, [pc, #264]	; (800229c <TIM_Base_SetConfig+0x134>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d007      	beq.n	80021a8 <TIM_Base_SetConfig+0x40>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a41      	ldr	r2, [pc, #260]	; (80022a0 <TIM_Base_SetConfig+0x138>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d003      	beq.n	80021a8 <TIM_Base_SetConfig+0x40>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a40      	ldr	r2, [pc, #256]	; (80022a4 <TIM_Base_SetConfig+0x13c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d108      	bne.n	80021ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a35      	ldr	r2, [pc, #212]	; (8002294 <TIM_Base_SetConfig+0x12c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d02b      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c8:	d027      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a32      	ldr	r2, [pc, #200]	; (8002298 <TIM_Base_SetConfig+0x130>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d023      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a31      	ldr	r2, [pc, #196]	; (800229c <TIM_Base_SetConfig+0x134>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d01f      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a30      	ldr	r2, [pc, #192]	; (80022a0 <TIM_Base_SetConfig+0x138>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d01b      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a2f      	ldr	r2, [pc, #188]	; (80022a4 <TIM_Base_SetConfig+0x13c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d017      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a2e      	ldr	r2, [pc, #184]	; (80022a8 <TIM_Base_SetConfig+0x140>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d013      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a2d      	ldr	r2, [pc, #180]	; (80022ac <TIM_Base_SetConfig+0x144>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00f      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a2c      	ldr	r2, [pc, #176]	; (80022b0 <TIM_Base_SetConfig+0x148>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00b      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a2b      	ldr	r2, [pc, #172]	; (80022b4 <TIM_Base_SetConfig+0x14c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d007      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a2a      	ldr	r2, [pc, #168]	; (80022b8 <TIM_Base_SetConfig+0x150>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d003      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a29      	ldr	r2, [pc, #164]	; (80022bc <TIM_Base_SetConfig+0x154>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d108      	bne.n	800222c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4313      	orrs	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	4313      	orrs	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a10      	ldr	r2, [pc, #64]	; (8002294 <TIM_Base_SetConfig+0x12c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d003      	beq.n	8002260 <TIM_Base_SetConfig+0xf8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <TIM_Base_SetConfig+0x13c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d103      	bne.n	8002268 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b01      	cmp	r3, #1
 8002278:	d105      	bne.n	8002286 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f023 0201 	bic.w	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	611a      	str	r2, [r3, #16]
  }
}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40010000 	.word	0x40010000
 8002298:	40000400 	.word	0x40000400
 800229c:	40000800 	.word	0x40000800
 80022a0:	40000c00 	.word	0x40000c00
 80022a4:	40010400 	.word	0x40010400
 80022a8:	40014000 	.word	0x40014000
 80022ac:	40014400 	.word	0x40014400
 80022b0:	40014800 	.word	0x40014800
 80022b4:	40001800 	.word	0x40001800
 80022b8:	40001c00 	.word	0x40001c00
 80022bc:	40002000 	.word	0x40002000

080022c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f103 0208 	add.w	r2, r3, #8
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002300:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f103 0208 	add.w	r2, r3, #8
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f103 0208 	add.w	r2, r3, #8
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002358:	d103      	bne.n	8002362 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	e00c      	b.n	800237c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3308      	adds	r3, #8
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	e002      	b.n	8002370 <vListInsert+0x2e>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	429a      	cmp	r2, r3
 800237a:	d2f6      	bcs.n	800236a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	601a      	str	r2, [r3, #0]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6892      	ldr	r2, [r2, #8]
 80023ca:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6852      	ldr	r2, [r2, #4]
 80023d4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d103      	bne.n	80023e8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	1e5a      	subs	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002412:	2301      	movs	r3, #1
 8002414:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002432:	bf00      	nop
 8002434:	e7fe      	b.n	8002434 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d05d      	beq.n	80024f8 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002440:	2b00      	cmp	r3, #0
 8002442:	d059      	beq.n	80024f8 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244c:	2100      	movs	r1, #0
 800244e:	fba3 2302 	umull	r2, r3, r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d000      	beq.n	8002458 <xQueueGenericReset+0x50>
 8002456:	2101      	movs	r1, #1
 8002458:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800245a:	2b00      	cmp	r3, #0
 800245c:	d14c      	bne.n	80024f8 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800245e:	f002 fae3 	bl	8004a28 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246a:	6939      	ldr	r1, [r7, #16]
 800246c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800246e:	fb01 f303 	mul.w	r3, r1, r3
 8002472:	441a      	add	r2, r3
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	2200      	movs	r2, #0
 800247c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248e:	3b01      	subs	r3, #1
 8002490:	6939      	ldr	r1, [r7, #16]
 8002492:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	441a      	add	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	22ff      	movs	r2, #255	; 0xff
 80024a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	22ff      	movs	r2, #255	; 0xff
 80024aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d114      	bne.n	80024de <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d01a      	beq.n	80024f2 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	3310      	adds	r3, #16
 80024c0:	4618      	mov	r0, r3
 80024c2:	f001 fa41 	bl	8003948 <xTaskRemoveFromEventList>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d012      	beq.n	80024f2 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80024cc:	4b15      	ldr	r3, [pc, #84]	; (8002524 <xQueueGenericReset+0x11c>)
 80024ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	f3bf 8f4f 	dsb	sy
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	e009      	b.n	80024f2 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	3310      	adds	r3, #16
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff ff00 	bl	80022e8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	3324      	adds	r3, #36	; 0x24
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fefb 	bl	80022e8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80024f2:	f002 fac9 	bl	8004a88 <vPortExitCritical>
 80024f6:	e001      	b.n	80024fc <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10a      	bne.n	8002518 <xQueueGenericReset+0x110>
        __asm volatile
 8002502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002506:	f383 8811 	msr	BASEPRI, r3
 800250a:	f3bf 8f6f 	isb	sy
 800250e:	f3bf 8f4f 	dsb	sy
 8002512:	60bb      	str	r3, [r7, #8]
    }
 8002514:	bf00      	nop
 8002516:	e7fe      	b.n	8002516 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002518:	697b      	ldr	r3, [r7, #20]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	e000ed04 	.word	0xe000ed04

08002528 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	; 0x28
 800252c:	af02      	add	r7, sp, #8
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	4613      	mov	r3, r2
 8002534:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d02e      	beq.n	800259e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002540:	2100      	movs	r1, #0
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	fba3 2302 	umull	r2, r3, r3, r2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d000      	beq.n	8002550 <xQueueGenericCreate+0x28>
 800254e:	2101      	movs	r1, #1
 8002550:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002552:	2b00      	cmp	r3, #0
 8002554:	d123      	bne.n	800259e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800255e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002562:	d81c      	bhi.n	800259e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	fb02 f303 	mul.w	r3, r2, r3
 800256c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	3350      	adds	r3, #80	; 0x50
 8002572:	4618      	mov	r0, r3
 8002574:	f002 fb3a 	bl	8004bec <pvPortMalloc>
 8002578:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01c      	beq.n	80025ba <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	3350      	adds	r3, #80	; 0x50
 8002588:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800258a:	79fa      	ldrb	r2, [r7, #7]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	4613      	mov	r3, r2
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f814 	bl	80025c4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800259c:	e00d      	b.n	80025ba <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10a      	bne.n	80025ba <xQueueGenericCreate+0x92>
        __asm volatile
 80025a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a8:	f383 8811 	msr	BASEPRI, r3
 80025ac:	f3bf 8f6f 	isb	sy
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	613b      	str	r3, [r7, #16]
    }
 80025b6:	bf00      	nop
 80025b8:	e7fe      	b.n	80025b8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80025ba:	69fb      	ldr	r3, [r7, #28]
    }
 80025bc:	4618      	mov	r0, r3
 80025be:	3720      	adds	r7, #32
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d103      	bne.n	80025e0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	e002      	b.n	80025e6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025f2:	2101      	movs	r1, #1
 80025f4:	69b8      	ldr	r0, [r7, #24]
 80025f6:	f7ff ff07 	bl	8002408 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00e      	beq.n	8002636 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800262a:	2300      	movs	r3, #0
 800262c:	2200      	movs	r2, #0
 800262e:	2100      	movs	r1, #0
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f81d 	bl	8002670 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002648:	2301      	movs	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	2300      	movs	r3, #0
 800264e:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	461a      	mov	r2, r3
 8002654:	6939      	ldr	r1, [r7, #16]
 8002656:	6978      	ldr	r0, [r7, #20]
 8002658:	f7ff ff66 	bl	8002528 <xQueueGenericCreate>
 800265c:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f7ff ffd3 	bl	800260a <prvInitialiseMutex>

        return xNewQueue;
 8002664:	68fb      	ldr	r3, [r7, #12]
    }
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08e      	sub	sp, #56	; 0x38
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
 800267c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800267e:	2300      	movs	r3, #0
 8002680:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10a      	bne.n	80026a2 <xQueueGenericSend+0x32>
        __asm volatile
 800268c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002690:	f383 8811 	msr	BASEPRI, r3
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800269e:	bf00      	nop
 80026a0:	e7fe      	b.n	80026a0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d103      	bne.n	80026b0 <xQueueGenericSend+0x40>
 80026a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <xQueueGenericSend+0x44>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <xQueueGenericSend+0x46>
 80026b4:	2300      	movs	r3, #0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10a      	bne.n	80026d0 <xQueueGenericSend+0x60>
        __asm volatile
 80026ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026be:	f383 8811 	msr	BASEPRI, r3
 80026c2:	f3bf 8f6f 	isb	sy
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80026cc:	bf00      	nop
 80026ce:	e7fe      	b.n	80026ce <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d103      	bne.n	80026de <xQueueGenericSend+0x6e>
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <xQueueGenericSend+0x72>
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <xQueueGenericSend+0x74>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10a      	bne.n	80026fe <xQueueGenericSend+0x8e>
        __asm volatile
 80026e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ec:	f383 8811 	msr	BASEPRI, r3
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	623b      	str	r3, [r7, #32]
    }
 80026fa:	bf00      	nop
 80026fc:	e7fe      	b.n	80026fc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026fe:	f001 fb33 	bl	8003d68 <xTaskGetSchedulerState>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <xQueueGenericSend+0x9e>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <xQueueGenericSend+0xa2>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <xQueueGenericSend+0xa4>
 8002712:	2300      	movs	r3, #0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10a      	bne.n	800272e <xQueueGenericSend+0xbe>
        __asm volatile
 8002718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	61fb      	str	r3, [r7, #28]
    }
 800272a:	bf00      	nop
 800272c:	e7fe      	b.n	800272c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800272e:	f002 f97b 	bl	8004a28 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	429a      	cmp	r2, r3
 800273c:	d302      	bcc.n	8002744 <xQueueGenericSend+0xd4>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d129      	bne.n	8002798 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800274a:	f000 fa85 	bl	8002c58 <prvCopyDataToQueue>
 800274e:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	2b00      	cmp	r3, #0
 8002756:	d010      	beq.n	800277a <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275a:	3324      	adds	r3, #36	; 0x24
 800275c:	4618      	mov	r0, r3
 800275e:	f001 f8f3 	bl	8003948 <xTaskRemoveFromEventList>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d013      	beq.n	8002790 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002768:	4b3f      	ldr	r3, [pc, #252]	; (8002868 <xQueueGenericSend+0x1f8>)
 800276a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	f3bf 8f4f 	dsb	sy
 8002774:	f3bf 8f6f 	isb	sy
 8002778:	e00a      	b.n	8002790 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8002780:	4b39      	ldr	r3, [pc, #228]	; (8002868 <xQueueGenericSend+0x1f8>)
 8002782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	f3bf 8f4f 	dsb	sy
 800278c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002790:	f002 f97a 	bl	8004a88 <vPortExitCritical>
                return pdPASS;
 8002794:	2301      	movs	r3, #1
 8002796:	e063      	b.n	8002860 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d103      	bne.n	80027a6 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800279e:	f002 f973 	bl	8004a88 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e05c      	b.n	8002860 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80027a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d106      	bne.n	80027ba <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	4618      	mov	r0, r3
 80027b2:	f001 f99f 	bl	8003af4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80027b6:	2301      	movs	r3, #1
 80027b8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80027ba:	f002 f965 	bl	8004a88 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80027be:	f000 fdcd 	bl	800335c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027c2:	f002 f931 	bl	8004a28 <vPortEnterCritical>
 80027c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027cc:	b25b      	sxtb	r3, r3
 80027ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027d2:	d103      	bne.n	80027dc <xQueueGenericSend+0x16c>
 80027d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027e2:	b25b      	sxtb	r3, r3
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027e8:	d103      	bne.n	80027f2 <xQueueGenericSend+0x182>
 80027ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027f2:	f002 f949 	bl	8004a88 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027f6:	1d3a      	adds	r2, r7, #4
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	4611      	mov	r1, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f001 f98e 	bl	8003b20 <xTaskCheckForTimeOut>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d124      	bne.n	8002854 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800280a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800280c:	f000 fb1c 	bl	8002e48 <prvIsQueueFull>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d018      	beq.n	8002848 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002818:	3310      	adds	r3, #16
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f001 f828 	bl	8003874 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002824:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002826:	f000 faa7 	bl	8002d78 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800282a:	f000 fda5 	bl	8003378 <xTaskResumeAll>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	f47f af7c 	bne.w	800272e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002836:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <xQueueGenericSend+0x1f8>)
 8002838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	f3bf 8f4f 	dsb	sy
 8002842:	f3bf 8f6f 	isb	sy
 8002846:	e772      	b.n	800272e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800284a:	f000 fa95 	bl	8002d78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800284e:	f000 fd93 	bl	8003378 <xTaskResumeAll>
 8002852:	e76c      	b.n	800272e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002856:	f000 fa8f 	bl	8002d78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800285a:	f000 fd8d 	bl	8003378 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800285e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002860:	4618      	mov	r0, r3
 8002862:	3738      	adds	r7, #56	; 0x38
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	e000ed04 	.word	0xe000ed04

0800286c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08c      	sub	sp, #48	; 0x30
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002878:	2300      	movs	r3, #0
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10a      	bne.n	800289c <xQueueReceive+0x30>
        __asm volatile
 8002886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288a:	f383 8811 	msr	BASEPRI, r3
 800288e:	f3bf 8f6f 	isb	sy
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	623b      	str	r3, [r7, #32]
    }
 8002898:	bf00      	nop
 800289a:	e7fe      	b.n	800289a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d103      	bne.n	80028aa <xQueueReceive+0x3e>
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <xQueueReceive+0x42>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <xQueueReceive+0x44>
 80028ae:	2300      	movs	r3, #0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10a      	bne.n	80028ca <xQueueReceive+0x5e>
        __asm volatile
 80028b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b8:	f383 8811 	msr	BASEPRI, r3
 80028bc:	f3bf 8f6f 	isb	sy
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	61fb      	str	r3, [r7, #28]
    }
 80028c6:	bf00      	nop
 80028c8:	e7fe      	b.n	80028c8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028ca:	f001 fa4d 	bl	8003d68 <xTaskGetSchedulerState>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d102      	bne.n	80028da <xQueueReceive+0x6e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <xQueueReceive+0x72>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <xQueueReceive+0x74>
 80028de:	2300      	movs	r3, #0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10a      	bne.n	80028fa <xQueueReceive+0x8e>
        __asm volatile
 80028e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e8:	f383 8811 	msr	BASEPRI, r3
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	61bb      	str	r3, [r7, #24]
    }
 80028f6:	bf00      	nop
 80028f8:	e7fe      	b.n	80028f8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80028fa:	f002 f895 	bl	8004a28 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002902:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	2b00      	cmp	r3, #0
 8002908:	d01f      	beq.n	800294a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800290a:	68b9      	ldr	r1, [r7, #8]
 800290c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800290e:	f000 fa0d 	bl	8002d2c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	1e5a      	subs	r2, r3, #1
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00f      	beq.n	8002942 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	3310      	adds	r3, #16
 8002926:	4618      	mov	r0, r3
 8002928:	f001 f80e 	bl	8003948 <xTaskRemoveFromEventList>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d007      	beq.n	8002942 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002932:	4b3d      	ldr	r3, [pc, #244]	; (8002a28 <xQueueReceive+0x1bc>)
 8002934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	f3bf 8f4f 	dsb	sy
 800293e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002942:	f002 f8a1 	bl	8004a88 <vPortExitCritical>
                return pdPASS;
 8002946:	2301      	movs	r3, #1
 8002948:	e069      	b.n	8002a1e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d103      	bne.n	8002958 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002950:	f002 f89a 	bl	8004a88 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002954:	2300      	movs	r3, #0
 8002956:	e062      	b.n	8002a1e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295a:	2b00      	cmp	r3, #0
 800295c:	d106      	bne.n	800296c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800295e:	f107 0310 	add.w	r3, r7, #16
 8002962:	4618      	mov	r0, r3
 8002964:	f001 f8c6 	bl	8003af4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002968:	2301      	movs	r3, #1
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800296c:	f002 f88c 	bl	8004a88 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002970:	f000 fcf4 	bl	800335c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002974:	f002 f858 	bl	8004a28 <vPortEnterCritical>
 8002978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800297e:	b25b      	sxtb	r3, r3
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002984:	d103      	bne.n	800298e <xQueueReceive+0x122>
 8002986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002990:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002994:	b25b      	sxtb	r3, r3
 8002996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800299a:	d103      	bne.n	80029a4 <xQueueReceive+0x138>
 800299c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029a4:	f002 f870 	bl	8004a88 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029a8:	1d3a      	adds	r2, r7, #4
 80029aa:	f107 0310 	add.w	r3, r7, #16
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f001 f8b5 	bl	8003b20 <xTaskCheckForTimeOut>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d123      	bne.n	8002a04 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029be:	f000 fa2d 	bl	8002e1c <prvIsQueueEmpty>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d017      	beq.n	80029f8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ca:	3324      	adds	r3, #36	; 0x24
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	4611      	mov	r1, r2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 ff4f 	bl	8003874 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80029d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029d8:	f000 f9ce 	bl	8002d78 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80029dc:	f000 fccc 	bl	8003378 <xTaskResumeAll>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d189      	bne.n	80028fa <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80029e6:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <xQueueReceive+0x1bc>)
 80029e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	f3bf 8f4f 	dsb	sy
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	e780      	b.n	80028fa <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80029f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029fa:	f000 f9bd 	bl	8002d78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029fe:	f000 fcbb 	bl	8003378 <xTaskResumeAll>
 8002a02:	e77a      	b.n	80028fa <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a06:	f000 f9b7 	bl	8002d78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a0a:	f000 fcb5 	bl	8003378 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a10:	f000 fa04 	bl	8002e1c <prvIsQueueEmpty>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f43f af6f 	beq.w	80028fa <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002a1c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3730      	adds	r7, #48	; 0x30
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	e000ed04 	.word	0xe000ed04

08002a2c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08c      	sub	sp, #48	; 0x30
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10a      	bne.n	8002a5e <xQueueSemaphoreTake+0x32>
        __asm volatile
 8002a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4c:	f383 8811 	msr	BASEPRI, r3
 8002a50:	f3bf 8f6f 	isb	sy
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	61bb      	str	r3, [r7, #24]
    }
 8002a5a:	bf00      	nop
 8002a5c:	e7fe      	b.n	8002a5c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <xQueueSemaphoreTake+0x50>
        __asm volatile
 8002a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6a:	f383 8811 	msr	BASEPRI, r3
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	617b      	str	r3, [r7, #20]
    }
 8002a78:	bf00      	nop
 8002a7a:	e7fe      	b.n	8002a7a <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a7c:	f001 f974 	bl	8003d68 <xTaskGetSchedulerState>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d102      	bne.n	8002a8c <xQueueSemaphoreTake+0x60>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <xQueueSemaphoreTake+0x64>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <xQueueSemaphoreTake+0x66>
 8002a90:	2300      	movs	r3, #0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10a      	bne.n	8002aac <xQueueSemaphoreTake+0x80>
        __asm volatile
 8002a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	613b      	str	r3, [r7, #16]
    }
 8002aa8:	bf00      	nop
 8002aaa:	e7fe      	b.n	8002aaa <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002aac:	f001 ffbc 	bl	8004a28 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab4:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d024      	beq.n	8002b06 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	1e5a      	subs	r2, r3, #1
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d104      	bne.n	8002ad6 <xQueueSemaphoreTake+0xaa>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002acc:	f001 fb64 	bl	8004198 <pvTaskIncrementMutexHeldCount>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00f      	beq.n	8002afe <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	3310      	adds	r3, #16
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 ff30 	bl	8003948 <xTaskRemoveFromEventList>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d007      	beq.n	8002afe <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002aee:	4b4d      	ldr	r3, [pc, #308]	; (8002c24 <xQueueSemaphoreTake+0x1f8>)
 8002af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	f3bf 8f4f 	dsb	sy
 8002afa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002afe:	f001 ffc3 	bl	8004a88 <vPortExitCritical>
                return pdPASS;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e089      	b.n	8002c1a <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8002b0c:	f001 ffbc 	bl	8004a88 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002b10:	2300      	movs	r3, #0
 8002b12:	e082      	b.n	8002c1a <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d106      	bne.n	8002b28 <xQueueSemaphoreTake+0xfc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002b1a:	f107 0308 	add.w	r3, r7, #8
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 ffe8 	bl	8003af4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002b24:	2301      	movs	r3, #1
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002b28:	f001 ffae 	bl	8004a88 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002b2c:	f000 fc16 	bl	800335c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002b30:	f001 ff7a 	bl	8004a28 <vPortEnterCritical>
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b3a:	b25b      	sxtb	r3, r3
 8002b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b40:	d103      	bne.n	8002b4a <xQueueSemaphoreTake+0x11e>
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b50:	b25b      	sxtb	r3, r3
 8002b52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b56:	d103      	bne.n	8002b60 <xQueueSemaphoreTake+0x134>
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b60:	f001 ff92 	bl	8004a88 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b64:	463a      	mov	r2, r7
 8002b66:	f107 0308 	add.w	r3, r7, #8
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 ffd7 	bl	8003b20 <xTaskCheckForTimeOut>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d132      	bne.n	8002bde <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b7a:	f000 f94f 	bl	8002e1c <prvIsQueueEmpty>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d026      	beq.n	8002bd2 <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d109      	bne.n	8002ba0 <xQueueSemaphoreTake+0x174>
                    {
                        taskENTER_CRITICAL();
 8002b8c:	f001 ff4c 	bl	8004a28 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f001 f905 	bl	8003da4 <xTaskPriorityInherit>
 8002b9a:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 8002b9c:	f001 ff74 	bl	8004a88 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	3324      	adds	r3, #36	; 0x24
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fe63 	bl	8003874 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002bae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bb0:	f000 f8e2 	bl	8002d78 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002bb4:	f000 fbe0 	bl	8003378 <xTaskResumeAll>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f47f af76 	bne.w	8002aac <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8002bc0:	4b18      	ldr	r3, [pc, #96]	; (8002c24 <xQueueSemaphoreTake+0x1f8>)
 8002bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	e76c      	b.n	8002aac <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8002bd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bd4:	f000 f8d0 	bl	8002d78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002bd8:	f000 fbce 	bl	8003378 <xTaskResumeAll>
 8002bdc:	e766      	b.n	8002aac <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8002bde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002be0:	f000 f8ca 	bl	8002d78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002be4:	f000 fbc8 	bl	8003378 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002be8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bea:	f000 f917 	bl	8002e1c <prvIsQueueEmpty>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f43f af5b 	beq.w	8002aac <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00d      	beq.n	8002c18 <xQueueSemaphoreTake+0x1ec>
                    {
                        taskENTER_CRITICAL();
 8002bfc:	f001 ff14 	bl	8004a28 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002c00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c02:	f000 f811 	bl	8002c28 <prvGetDisinheritPriorityAfterTimeout>
 8002c06:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	69f9      	ldr	r1, [r7, #28]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f001 fa0a 	bl	8004028 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8002c14:	f001 ff38 	bl	8004a88 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002c18:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3730      	adds	r7, #48	; 0x30
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	e000ed04 	.word	0xe000ed04

08002c28 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d006      	beq.n	8002c46 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f1c3 0305 	rsb	r3, r3, #5
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	e001      	b.n	8002c4a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
    }
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10d      	bne.n	8002c92 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d14d      	bne.n	8002d1a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f001 f92c 	bl	8003ee0 <xTaskPriorityDisinherit>
 8002c88:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	e043      	b.n	8002d1a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d119      	bne.n	8002ccc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6858      	ldr	r0, [r3, #4]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	68b9      	ldr	r1, [r7, #8]
 8002ca4:	f002 f83a 	bl	8004d1c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	441a      	add	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d32b      	bcc.n	8002d1a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	e026      	b.n	8002d1a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	68d8      	ldr	r0, [r3, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	68b9      	ldr	r1, [r7, #8]
 8002cd8:	f002 f820 	bl	8004d1c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	425b      	negs	r3, r3
 8002ce6:	441a      	add	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d207      	bcs.n	8002d08 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	425b      	negs	r3, r3
 8002d02:	441a      	add	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d105      	bne.n	8002d1a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002d22:	697b      	ldr	r3, [r7, #20]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d018      	beq.n	8002d70 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	441a      	add	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d303      	bcc.n	8002d60 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68d9      	ldr	r1, [r3, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	461a      	mov	r2, r3
 8002d6a:	6838      	ldr	r0, [r7, #0]
 8002d6c:	f001 ffd6 	bl	8004d1c <memcpy>
    }
}
 8002d70:	bf00      	nop
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002d80:	f001 fe52 	bl	8004a28 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d8a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d8c:	e011      	b.n	8002db2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d012      	beq.n	8002dbc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3324      	adds	r3, #36	; 0x24
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fdd4 	bl	8003948 <xTaskRemoveFromEventList>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002da6:	f000 ff21 	bl	8003bec <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	dce9      	bgt.n	8002d8e <prvUnlockQueue+0x16>
 8002dba:	e000      	b.n	8002dbe <prvUnlockQueue+0x46>
                    break;
 8002dbc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	22ff      	movs	r2, #255	; 0xff
 8002dc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002dc6:	f001 fe5f 	bl	8004a88 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002dca:	f001 fe2d 	bl	8004a28 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dd4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dd6:	e011      	b.n	8002dfc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d012      	beq.n	8002e06 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3310      	adds	r3, #16
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fdaf 	bl	8003948 <xTaskRemoveFromEventList>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002df0:	f000 fefc 	bl	8003bec <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002df4:	7bbb      	ldrb	r3, [r7, #14]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	dce9      	bgt.n	8002dd8 <prvUnlockQueue+0x60>
 8002e04:	e000      	b.n	8002e08 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002e06:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	22ff      	movs	r2, #255	; 0xff
 8002e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002e10:	f001 fe3a 	bl	8004a88 <vPortExitCritical>
}
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e24:	f001 fe00 	bl	8004a28 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d102      	bne.n	8002e36 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002e30:	2301      	movs	r3, #1
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	e001      	b.n	8002e3a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e3a:	f001 fe25 	bl	8004a88 <vPortExitCritical>

    return xReturn;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e50:	f001 fdea 	bl	8004a28 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d102      	bne.n	8002e66 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002e60:	2301      	movs	r3, #1
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	e001      	b.n	8002e6a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e6a:	f001 fe0d 	bl	8004a88 <vPortExitCritical>

    return xReturn;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	60fb      	str	r3, [r7, #12]
    }
 8002e9e:	bf00      	nop
 8002ea0:	e7fe      	b.n	8002ea0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d024      	beq.n	8002ef2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	e01e      	b.n	8002eec <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002eae:	4a18      	ldr	r2, [pc, #96]	; (8002f10 <vQueueAddToRegistry+0x98>)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d105      	bne.n	8002eca <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <vQueueAddToRegistry+0x98>)
 8002ec4:	4413      	add	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
                    break;
 8002ec8:	e013      	b.n	8002ef2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10a      	bne.n	8002ee6 <vQueueAddToRegistry+0x6e>
 8002ed0:	4a0f      	ldr	r2, [pc, #60]	; (8002f10 <vQueueAddToRegistry+0x98>)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d104      	bne.n	8002ee6 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4a0b      	ldr	r2, [pc, #44]	; (8002f10 <vQueueAddToRegistry+0x98>)
 8002ee2:	4413      	add	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2b07      	cmp	r3, #7
 8002ef0:	d9dd      	bls.n	8002eae <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002f04:	bf00      	nop
 8002f06:	371c      	adds	r7, #28
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	20000088 	.word	0x20000088

08002f14 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002f24:	f001 fd80 	bl	8004a28 <vPortEnterCritical>
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f2e:	b25b      	sxtb	r3, r3
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f34:	d103      	bne.n	8002f3e <vQueueWaitForMessageRestricted+0x2a>
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f44:	b25b      	sxtb	r3, r3
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f4a:	d103      	bne.n	8002f54 <vQueueWaitForMessageRestricted+0x40>
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f54:	f001 fd98 	bl	8004a88 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d106      	bne.n	8002f6e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	3324      	adds	r3, #36	; 0x24
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fca7 	bl	80038bc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002f6e:	6978      	ldr	r0, [r7, #20]
 8002f70:	f7ff ff02 	bl	8002d78 <prvUnlockQueue>
    }
 8002f74:	bf00      	nop
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08c      	sub	sp, #48	; 0x30
 8002f80:	af04      	add	r7, sp, #16
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f001 fe2b 	bl	8004bec <pvPortMalloc>
 8002f96:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d013      	beq.n	8002fc6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f9e:	2058      	movs	r0, #88	; 0x58
 8002fa0:	f001 fe24 	bl	8004bec <pvPortMalloc>
 8002fa4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002fac:	2258      	movs	r2, #88	; 0x58
 8002fae:	2100      	movs	r1, #0
 8002fb0:	69f8      	ldr	r0, [r7, #28]
 8002fb2:	f001 fe87 	bl	8004cc4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
 8002fbc:	e005      	b.n	8002fca <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002fbe:	6978      	ldr	r0, [r7, #20]
 8002fc0:	f001 fe68 	bl	8004c94 <vPortFree>
 8002fc4:	e001      	b.n	8002fca <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d013      	beq.n	8002ff8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002fd0:	88fa      	ldrh	r2, [r7, #6]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	9303      	str	r3, [sp, #12]
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	9302      	str	r3, [sp, #8]
 8002fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fdc:	9301      	str	r3, [sp, #4]
 8002fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f80e 	bl	8003008 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002fec:	69f8      	ldr	r0, [r7, #28]
 8002fee:	f000 f899 	bl	8003124 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	e002      	b.n	8002ffe <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ffc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002ffe:	69bb      	ldr	r3, [r7, #24]
    }
 8003000:	4618      	mov	r0, r3
 8003002:	3720      	adds	r7, #32
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003018:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	461a      	mov	r2, r3
 8003020:	21a5      	movs	r1, #165	; 0xa5
 8003022:	f001 fe4f 	bl	8004cc4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003030:	3b01      	subs	r3, #1
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	f023 0307 	bic.w	r3, r3, #7
 800303e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <prvInitialiseNewTask+0x58>
        __asm volatile
 800304a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304e:	f383 8811 	msr	BASEPRI, r3
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	617b      	str	r3, [r7, #20]
    }
 800305c:	bf00      	nop
 800305e:	e7fe      	b.n	800305e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d01e      	beq.n	80030a4 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
 800306a:	e012      	b.n	8003092 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	4413      	add	r3, r2
 8003072:	7819      	ldrb	r1, [r3, #0]
 8003074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	4413      	add	r3, r2
 800307a:	3334      	adds	r3, #52	; 0x34
 800307c:	460a      	mov	r2, r1
 800307e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	4413      	add	r3, r2
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d006      	beq.n	800309a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	3301      	adds	r3, #1
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	2b09      	cmp	r3, #9
 8003096:	d9e9      	bls.n	800306c <prvInitialiseNewTask+0x64>
 8003098:	e000      	b.n	800309c <prvInitialiseNewTask+0x94>
            {
                break;
 800309a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80030a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d90a      	bls.n	80030c0 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80030aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	613b      	str	r3, [r7, #16]
    }
 80030bc:	bf00      	nop
 80030be:	e7fe      	b.n	80030be <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d901      	bls.n	80030ca <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030c6:	2304      	movs	r3, #4
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030d4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d8:	3304      	adds	r3, #4
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff f924 	bl	8002328 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	3318      	adds	r3, #24
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff f91f 	bl	8002328 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ee:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f2:	f1c3 0205 	rsb	r2, r3, #5
 80030f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030fe:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	68f9      	ldr	r1, [r7, #12]
 8003104:	69b8      	ldr	r0, [r7, #24]
 8003106:	f001 fb5f 	bl	80047c8 <pxPortInitialiseStack>
 800310a:	4602      	mov	r2, r0
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800311a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800311c:	bf00      	nop
 800311e:	3720      	adds	r7, #32
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800312c:	f001 fc7c 	bl	8004a28 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003130:	4b40      	ldr	r3, [pc, #256]	; (8003234 <prvAddNewTaskToReadyList+0x110>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3301      	adds	r3, #1
 8003136:	4a3f      	ldr	r2, [pc, #252]	; (8003234 <prvAddNewTaskToReadyList+0x110>)
 8003138:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800313a:	4b3f      	ldr	r3, [pc, #252]	; (8003238 <prvAddNewTaskToReadyList+0x114>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003142:	4a3d      	ldr	r2, [pc, #244]	; (8003238 <prvAddNewTaskToReadyList+0x114>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003148:	4b3a      	ldr	r3, [pc, #232]	; (8003234 <prvAddNewTaskToReadyList+0x110>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d110      	bne.n	8003172 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003150:	f000 fd70 	bl	8003c34 <prvInitialiseTaskLists>
 8003154:	e00d      	b.n	8003172 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003156:	4b39      	ldr	r3, [pc, #228]	; (800323c <prvAddNewTaskToReadyList+0x118>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800315e:	4b36      	ldr	r3, [pc, #216]	; (8003238 <prvAddNewTaskToReadyList+0x114>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	429a      	cmp	r2, r3
 800316a:	d802      	bhi.n	8003172 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800316c:	4a32      	ldr	r2, [pc, #200]	; (8003238 <prvAddNewTaskToReadyList+0x114>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003172:	4b33      	ldr	r3, [pc, #204]	; (8003240 <prvAddNewTaskToReadyList+0x11c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3301      	adds	r3, #1
 8003178:	4a31      	ldr	r2, [pc, #196]	; (8003240 <prvAddNewTaskToReadyList+0x11c>)
 800317a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800317c:	4b30      	ldr	r3, [pc, #192]	; (8003240 <prvAddNewTaskToReadyList+0x11c>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	2201      	movs	r2, #1
 800318a:	409a      	lsls	r2, r3
 800318c:	4b2d      	ldr	r3, [pc, #180]	; (8003244 <prvAddNewTaskToReadyList+0x120>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4313      	orrs	r3, r2
 8003192:	4a2c      	ldr	r2, [pc, #176]	; (8003244 <prvAddNewTaskToReadyList+0x120>)
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319a:	492b      	ldr	r1, [pc, #172]	; (8003248 <prvAddNewTaskToReadyList+0x124>)
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	3304      	adds	r3, #4
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	609a      	str	r2, [r3, #8]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	3204      	adds	r2, #4
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	1d1a      	adds	r2, r3, #4
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4a1b      	ldr	r2, [pc, #108]	; (8003248 <prvAddNewTaskToReadyList+0x124>)
 80031da:	441a      	add	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	615a      	str	r2, [r3, #20]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e4:	4918      	ldr	r1, [pc, #96]	; (8003248 <prvAddNewTaskToReadyList+0x124>)
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	1c59      	adds	r1, r3, #1
 80031f4:	4814      	ldr	r0, [pc, #80]	; (8003248 <prvAddNewTaskToReadyList+0x124>)
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4403      	add	r3, r0
 8003200:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003202:	f001 fc41 	bl	8004a88 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003206:	4b0d      	ldr	r3, [pc, #52]	; (800323c <prvAddNewTaskToReadyList+0x118>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00e      	beq.n	800322c <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <prvAddNewTaskToReadyList+0x114>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	429a      	cmp	r2, r3
 800321a:	d207      	bcs.n	800322c <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <prvAddNewTaskToReadyList+0x128>)
 800321e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800322c:	bf00      	nop
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	200001a0 	.word	0x200001a0
 8003238:	200000c8 	.word	0x200000c8
 800323c:	200001ac 	.word	0x200001ac
 8003240:	200001bc 	.word	0x200001bc
 8003244:	200001a8 	.word	0x200001a8
 8003248:	200000cc 	.word	0x200000cc
 800324c:	e000ed04 	.word	0xe000ed04

08003250 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d017      	beq.n	8003292 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003262:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <vTaskDelay+0x60>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <vTaskDelay+0x30>
        __asm volatile
 800326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	60bb      	str	r3, [r7, #8]
    }
 800327c:	bf00      	nop
 800327e:	e7fe      	b.n	800327e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003280:	f000 f86c 	bl	800335c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003284:	2100      	movs	r1, #0
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 ff9a 	bl	80041c0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800328c:	f000 f874 	bl	8003378 <xTaskResumeAll>
 8003290:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d107      	bne.n	80032a8 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8003298:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <vTaskDelay+0x64>)
 800329a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80032a8:	bf00      	nop
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	200001c8 	.word	0x200001c8
 80032b4:	e000ed04 	.word	0xe000ed04

080032b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80032be:	4b20      	ldr	r3, [pc, #128]	; (8003340 <vTaskStartScheduler+0x88>)
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	2300      	movs	r3, #0
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	2300      	movs	r3, #0
 80032c8:	2282      	movs	r2, #130	; 0x82
 80032ca:	491e      	ldr	r1, [pc, #120]	; (8003344 <vTaskStartScheduler+0x8c>)
 80032cc:	481e      	ldr	r0, [pc, #120]	; (8003348 <vTaskStartScheduler+0x90>)
 80032ce:	f7ff fe55 	bl	8002f7c <xTaskCreate>
 80032d2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d102      	bne.n	80032e0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80032da:	f000 fff1 	bl	80042c0 <xTimerCreateTimerTask>
 80032de:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d116      	bne.n	8003314 <vTaskStartScheduler+0x5c>
        __asm volatile
 80032e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	60bb      	str	r3, [r7, #8]
    }
 80032f8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80032fa:	4b14      	ldr	r3, [pc, #80]	; (800334c <vTaskStartScheduler+0x94>)
 80032fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003300:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003302:	4b13      	ldr	r3, [pc, #76]	; (8003350 <vTaskStartScheduler+0x98>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003308:	4b12      	ldr	r3, [pc, #72]	; (8003354 <vTaskStartScheduler+0x9c>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800330e:	f001 fae9 	bl	80048e4 <xPortStartScheduler>
 8003312:	e00e      	b.n	8003332 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800331a:	d10a      	bne.n	8003332 <vTaskStartScheduler+0x7a>
        __asm volatile
 800331c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003320:	f383 8811 	msr	BASEPRI, r3
 8003324:	f3bf 8f6f 	isb	sy
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	607b      	str	r3, [r7, #4]
    }
 800332e:	bf00      	nop
 8003330:	e7fe      	b.n	8003330 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <vTaskStartScheduler+0xa0>)
 8003334:	681b      	ldr	r3, [r3, #0]
}
 8003336:	bf00      	nop
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	200001c4 	.word	0x200001c4
 8003344:	08004d98 	.word	0x08004d98
 8003348:	08003c05 	.word	0x08003c05
 800334c:	200001c0 	.word	0x200001c0
 8003350:	200001ac 	.word	0x200001ac
 8003354:	200001a4 	.word	0x200001a4
 8003358:	2000000c 	.word	0x2000000c

0800335c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <vTaskSuspendAll+0x18>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3301      	adds	r3, #1
 8003366:	4a03      	ldr	r2, [pc, #12]	; (8003374 <vTaskSuspendAll+0x18>)
 8003368:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800336a:	bf00      	nop
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	200001c8 	.word	0x200001c8

08003378 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003382:	2300      	movs	r3, #0
 8003384:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003386:	4b71      	ldr	r3, [pc, #452]	; (800354c <xTaskResumeAll+0x1d4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10a      	bne.n	80033a4 <xTaskResumeAll+0x2c>
        __asm volatile
 800338e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003392:	f383 8811 	msr	BASEPRI, r3
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	607b      	str	r3, [r7, #4]
    }
 80033a0:	bf00      	nop
 80033a2:	e7fe      	b.n	80033a2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80033a4:	f001 fb40 	bl	8004a28 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80033a8:	4b68      	ldr	r3, [pc, #416]	; (800354c <xTaskResumeAll+0x1d4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	4a67      	ldr	r2, [pc, #412]	; (800354c <xTaskResumeAll+0x1d4>)
 80033b0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033b2:	4b66      	ldr	r3, [pc, #408]	; (800354c <xTaskResumeAll+0x1d4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f040 80c0 	bne.w	800353c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033bc:	4b64      	ldr	r3, [pc, #400]	; (8003550 <xTaskResumeAll+0x1d8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80bb 	beq.w	800353c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033c6:	e08a      	b.n	80034de <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033c8:	4b62      	ldr	r3, [pc, #392]	; (8003554 <xTaskResumeAll+0x1dc>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	6a12      	ldr	r2, [r2, #32]
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	69d2      	ldr	r2, [r2, #28]
 80033e8:	605a      	str	r2, [r3, #4]
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3318      	adds	r3, #24
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d103      	bne.n	80033fe <xTaskResumeAll+0x86>
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	6a1a      	ldr	r2, [r3, #32]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	2200      	movs	r2, #0
 8003402:	629a      	str	r2, [r3, #40]	; 0x28
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	1e5a      	subs	r2, r3, #1
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	68d2      	ldr	r2, [r2, #12]
 800341c:	609a      	str	r2, [r3, #8]
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	6892      	ldr	r2, [r2, #8]
 8003426:	605a      	str	r2, [r3, #4]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	3304      	adds	r3, #4
 8003430:	429a      	cmp	r2, r3
 8003432:	d103      	bne.n	800343c <xTaskResumeAll+0xc4>
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	2200      	movs	r2, #0
 8003440:	615a      	str	r2, [r3, #20]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	1e5a      	subs	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	2201      	movs	r2, #1
 8003452:	409a      	lsls	r2, r3
 8003454:	4b40      	ldr	r3, [pc, #256]	; (8003558 <xTaskResumeAll+0x1e0>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4313      	orrs	r3, r2
 800345a:	4a3f      	ldr	r2, [pc, #252]	; (8003558 <xTaskResumeAll+0x1e0>)
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003462:	493e      	ldr	r1, [pc, #248]	; (800355c <xTaskResumeAll+0x1e4>)
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	3304      	adds	r3, #4
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	609a      	str	r2, [r3, #8]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	3204      	adds	r2, #4
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	1d1a      	adds	r2, r3, #4
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4a2e      	ldr	r2, [pc, #184]	; (800355c <xTaskResumeAll+0x1e4>)
 80034a2:	441a      	add	r2, r3
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	615a      	str	r2, [r3, #20]
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ac:	492b      	ldr	r1, [pc, #172]	; (800355c <xTaskResumeAll+0x1e4>)
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	1c59      	adds	r1, r3, #1
 80034bc:	4827      	ldr	r0, [pc, #156]	; (800355c <xTaskResumeAll+0x1e4>)
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4403      	add	r3, r0
 80034c8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ce:	4b24      	ldr	r3, [pc, #144]	; (8003560 <xTaskResumeAll+0x1e8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d302      	bcc.n	80034de <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80034d8:	4b22      	ldr	r3, [pc, #136]	; (8003564 <xTaskResumeAll+0x1ec>)
 80034da:	2201      	movs	r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034de:	4b1d      	ldr	r3, [pc, #116]	; (8003554 <xTaskResumeAll+0x1dc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f47f af70 	bne.w	80033c8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80034ee:	f000 fc1f 	bl	8003d30 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80034f2:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <xTaskResumeAll+0x1f0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d010      	beq.n	8003520 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80034fe:	f000 f847 	bl	8003590 <xTaskIncrementTick>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8003508:	4b16      	ldr	r3, [pc, #88]	; (8003564 <xTaskResumeAll+0x1ec>)
 800350a:	2201      	movs	r2, #1
 800350c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	3b01      	subs	r3, #1
 8003512:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f1      	bne.n	80034fe <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <xTaskResumeAll+0x1f0>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003520:	4b10      	ldr	r3, [pc, #64]	; (8003564 <xTaskResumeAll+0x1ec>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d009      	beq.n	800353c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003528:	2301      	movs	r3, #1
 800352a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800352c:	4b0f      	ldr	r3, [pc, #60]	; (800356c <xTaskResumeAll+0x1f4>)
 800352e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800353c:	f001 faa4 	bl	8004a88 <vPortExitCritical>

    return xAlreadyYielded;
 8003540:	69bb      	ldr	r3, [r7, #24]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3720      	adds	r7, #32
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	200001c8 	.word	0x200001c8
 8003550:	200001a0 	.word	0x200001a0
 8003554:	20000160 	.word	0x20000160
 8003558:	200001a8 	.word	0x200001a8
 800355c:	200000cc 	.word	0x200000cc
 8003560:	200000c8 	.word	0x200000c8
 8003564:	200001b4 	.word	0x200001b4
 8003568:	200001b0 	.word	0x200001b0
 800356c:	e000ed04 	.word	0xe000ed04

08003570 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003576:	4b05      	ldr	r3, [pc, #20]	; (800358c <xTaskGetTickCount+0x1c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800357c:	687b      	ldr	r3, [r7, #4]
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	200001a4 	.word	0x200001a4

08003590 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003596:	2300      	movs	r3, #0
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800359a:	4b7d      	ldr	r3, [pc, #500]	; (8003790 <xTaskIncrementTick+0x200>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f040 80ec 	bne.w	800377c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035a4:	4b7b      	ldr	r3, [pc, #492]	; (8003794 <xTaskIncrementTick+0x204>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3301      	adds	r3, #1
 80035aa:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80035ac:	4a79      	ldr	r2, [pc, #484]	; (8003794 <xTaskIncrementTick+0x204>)
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d120      	bne.n	80035fa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80035b8:	4b77      	ldr	r3, [pc, #476]	; (8003798 <xTaskIncrementTick+0x208>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <xTaskIncrementTick+0x48>
        __asm volatile
 80035c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c6:	f383 8811 	msr	BASEPRI, r3
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	607b      	str	r3, [r7, #4]
    }
 80035d4:	bf00      	nop
 80035d6:	e7fe      	b.n	80035d6 <xTaskIncrementTick+0x46>
 80035d8:	4b6f      	ldr	r3, [pc, #444]	; (8003798 <xTaskIncrementTick+0x208>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	61fb      	str	r3, [r7, #28]
 80035de:	4b6f      	ldr	r3, [pc, #444]	; (800379c <xTaskIncrementTick+0x20c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a6d      	ldr	r2, [pc, #436]	; (8003798 <xTaskIncrementTick+0x208>)
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	4a6d      	ldr	r2, [pc, #436]	; (800379c <xTaskIncrementTick+0x20c>)
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	4b6c      	ldr	r3, [pc, #432]	; (80037a0 <xTaskIncrementTick+0x210>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3301      	adds	r3, #1
 80035f2:	4a6b      	ldr	r2, [pc, #428]	; (80037a0 <xTaskIncrementTick+0x210>)
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	f000 fb9b 	bl	8003d30 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80035fa:	4b6a      	ldr	r3, [pc, #424]	; (80037a4 <xTaskIncrementTick+0x214>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6a3a      	ldr	r2, [r7, #32]
 8003600:	429a      	cmp	r2, r3
 8003602:	f0c0 80a6 	bcc.w	8003752 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003606:	4b64      	ldr	r3, [pc, #400]	; (8003798 <xTaskIncrementTick+0x208>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d104      	bne.n	800361a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003610:	4b64      	ldr	r3, [pc, #400]	; (80037a4 <xTaskIncrementTick+0x214>)
 8003612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003616:	601a      	str	r2, [r3, #0]
                    break;
 8003618:	e09b      	b.n	8003752 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800361a:	4b5f      	ldr	r3, [pc, #380]	; (8003798 <xTaskIncrementTick+0x208>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800362a:	6a3a      	ldr	r2, [r7, #32]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	429a      	cmp	r2, r3
 8003630:	d203      	bcs.n	800363a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003632:	4a5c      	ldr	r2, [pc, #368]	; (80037a4 <xTaskIncrementTick+0x214>)
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003638:	e08b      	b.n	8003752 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	68d2      	ldr	r2, [r2, #12]
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	6892      	ldr	r2, [r2, #8]
 8003652:	605a      	str	r2, [r3, #4]
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	3304      	adds	r3, #4
 800365c:	429a      	cmp	r2, r3
 800365e:	d103      	bne.n	8003668 <xTaskIncrementTick+0xd8>
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	605a      	str	r2, [r3, #4]
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	2200      	movs	r2, #0
 800366c:	615a      	str	r2, [r3, #20]
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	1e5a      	subs	r2, r3, #1
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	2b00      	cmp	r3, #0
 800367e:	d01e      	beq.n	80036be <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	6a12      	ldr	r2, [r2, #32]
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	69d2      	ldr	r2, [r2, #28]
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	3318      	adds	r3, #24
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d103      	bne.n	80036ae <xTaskIncrementTick+0x11e>
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	6a1a      	ldr	r2, [r3, #32]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	2200      	movs	r2, #0
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	1e5a      	subs	r2, r3, #1
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	2201      	movs	r2, #1
 80036c4:	409a      	lsls	r2, r3
 80036c6:	4b38      	ldr	r3, [pc, #224]	; (80037a8 <xTaskIncrementTick+0x218>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	4a36      	ldr	r2, [pc, #216]	; (80037a8 <xTaskIncrementTick+0x218>)
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d4:	4935      	ldr	r1, [pc, #212]	; (80037ac <xTaskIncrementTick+0x21c>)
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	3304      	adds	r3, #4
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	60da      	str	r2, [r3, #12]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	3204      	adds	r2, #4
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	1d1a      	adds	r2, r3, #4
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	609a      	str	r2, [r3, #8]
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4a26      	ldr	r2, [pc, #152]	; (80037ac <xTaskIncrementTick+0x21c>)
 8003714:	441a      	add	r2, r3
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	615a      	str	r2, [r3, #20]
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371e:	4923      	ldr	r1, [pc, #140]	; (80037ac <xTaskIncrementTick+0x21c>)
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	1c59      	adds	r1, r3, #1
 800372e:	481f      	ldr	r0, [pc, #124]	; (80037ac <xTaskIncrementTick+0x21c>)
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4403      	add	r3, r0
 800373a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003740:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <xTaskIncrementTick+0x220>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	429a      	cmp	r2, r3
 8003748:	f67f af5d 	bls.w	8003606 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800374c:	2301      	movs	r3, #1
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003750:	e759      	b.n	8003606 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003752:	4b17      	ldr	r3, [pc, #92]	; (80037b0 <xTaskIncrementTick+0x220>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003758:	4914      	ldr	r1, [pc, #80]	; (80037ac <xTaskIncrementTick+0x21c>)
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d901      	bls.n	800376e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800376a:	2301      	movs	r3, #1
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800376e:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <xTaskIncrementTick+0x224>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d007      	beq.n	8003786 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8003776:	2301      	movs	r3, #1
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
 800377a:	e004      	b.n	8003786 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800377c:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <xTaskIncrementTick+0x228>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3301      	adds	r3, #1
 8003782:	4a0d      	ldr	r2, [pc, #52]	; (80037b8 <xTaskIncrementTick+0x228>)
 8003784:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003788:	4618      	mov	r0, r3
 800378a:	3728      	adds	r7, #40	; 0x28
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	200001c8 	.word	0x200001c8
 8003794:	200001a4 	.word	0x200001a4
 8003798:	20000158 	.word	0x20000158
 800379c:	2000015c 	.word	0x2000015c
 80037a0:	200001b8 	.word	0x200001b8
 80037a4:	200001c0 	.word	0x200001c0
 80037a8:	200001a8 	.word	0x200001a8
 80037ac:	200000cc 	.word	0x200000cc
 80037b0:	200000c8 	.word	0x200000c8
 80037b4:	200001b4 	.word	0x200001b4
 80037b8:	200001b0 	.word	0x200001b0

080037bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037c2:	4b27      	ldr	r3, [pc, #156]	; (8003860 <vTaskSwitchContext+0xa4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80037ca:	4b26      	ldr	r3, [pc, #152]	; (8003864 <vTaskSwitchContext+0xa8>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80037d0:	e03f      	b.n	8003852 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80037d2:	4b24      	ldr	r3, [pc, #144]	; (8003864 <vTaskSwitchContext+0xa8>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037d8:	4b23      	ldr	r3, [pc, #140]	; (8003868 <vTaskSwitchContext+0xac>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	fab3 f383 	clz	r3, r3
 80037e4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80037e6:	7afb      	ldrb	r3, [r7, #11]
 80037e8:	f1c3 031f 	rsb	r3, r3, #31
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	491f      	ldr	r1, [pc, #124]	; (800386c <vTaskSwitchContext+0xb0>)
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10a      	bne.n	8003818 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	607b      	str	r3, [r7, #4]
    }
 8003814:	bf00      	nop
 8003816:	e7fe      	b.n	8003816 <vTaskSwitchContext+0x5a>
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4613      	mov	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4a12      	ldr	r2, [pc, #72]	; (800386c <vTaskSwitchContext+0xb0>)
 8003824:	4413      	add	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	3308      	adds	r3, #8
 800383a:	429a      	cmp	r2, r3
 800383c:	d104      	bne.n	8003848 <vTaskSwitchContext+0x8c>
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	4a08      	ldr	r2, [pc, #32]	; (8003870 <vTaskSwitchContext+0xb4>)
 8003850:	6013      	str	r3, [r2, #0]
}
 8003852:	bf00      	nop
 8003854:	371c      	adds	r7, #28
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	200001c8 	.word	0x200001c8
 8003864:	200001b4 	.word	0x200001b4
 8003868:	200001a8 	.word	0x200001a8
 800386c:	200000cc 	.word	0x200000cc
 8003870:	200000c8 	.word	0x200000c8

08003874 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10a      	bne.n	800389a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	60fb      	str	r3, [r7, #12]
    }
 8003896:	bf00      	nop
 8003898:	e7fe      	b.n	8003898 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800389a:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <vTaskPlaceOnEventList+0x44>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3318      	adds	r3, #24
 80038a0:	4619      	mov	r1, r3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fe fd4d 	bl	8002342 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038a8:	2101      	movs	r1, #1
 80038aa:	6838      	ldr	r0, [r7, #0]
 80038ac:	f000 fc88 	bl	80041c0 <prvAddCurrentTaskToDelayedList>
}
 80038b0:	bf00      	nop
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	200000c8 	.word	0x200000c8

080038bc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10a      	bne.n	80038e4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80038ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	613b      	str	r3, [r7, #16]
    }
 80038e0:	bf00      	nop
 80038e2:	e7fe      	b.n	80038e2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	4b16      	ldr	r3, [pc, #88]	; (8003944 <vTaskPlaceOnEventListRestricted+0x88>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	61da      	str	r2, [r3, #28]
 80038f2:	4b14      	ldr	r3, [pc, #80]	; (8003944 <vTaskPlaceOnEventListRestricted+0x88>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	6892      	ldr	r2, [r2, #8]
 80038fa:	621a      	str	r2, [r3, #32]
 80038fc:	4b11      	ldr	r3, [pc, #68]	; (8003944 <vTaskPlaceOnEventListRestricted+0x88>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	3218      	adds	r2, #24
 8003906:	605a      	str	r2, [r3, #4]
 8003908:	4b0e      	ldr	r3, [pc, #56]	; (8003944 <vTaskPlaceOnEventListRestricted+0x88>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f103 0218 	add.w	r2, r3, #24
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <vTaskPlaceOnEventListRestricted+0x88>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	629a      	str	r2, [r3, #40]	; 0x28
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800392c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003930:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	68b8      	ldr	r0, [r7, #8]
 8003936:	f000 fc43 	bl	80041c0 <prvAddCurrentTaskToDelayedList>
    }
 800393a:	bf00      	nop
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	200000c8 	.word	0x200000c8

08003948 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003948:	b480      	push	{r7}
 800394a:	b08b      	sub	sp, #44	; 0x2c
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	60fb      	str	r3, [r7, #12]
    }
 8003970:	bf00      	nop
 8003972:	e7fe      	b.n	8003972 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	61fb      	str	r3, [r7, #28]
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	6a3a      	ldr	r2, [r7, #32]
 8003980:	6a12      	ldr	r2, [r2, #32]
 8003982:	609a      	str	r2, [r3, #8]
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	6a3a      	ldr	r2, [r7, #32]
 800398a:	69d2      	ldr	r2, [r2, #28]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	3318      	adds	r3, #24
 8003996:	429a      	cmp	r2, r3
 8003998:	d103      	bne.n	80039a2 <xTaskRemoveFromEventList+0x5a>
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	6a1a      	ldr	r2, [r3, #32]
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	2200      	movs	r2, #0
 80039a6:	629a      	str	r2, [r3, #40]	; 0x28
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	1e5a      	subs	r2, r3, #1
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039b2:	4b4a      	ldr	r3, [pc, #296]	; (8003adc <xTaskRemoveFromEventList+0x194>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d15e      	bne.n	8003a78 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	6a3a      	ldr	r2, [r7, #32]
 80039c6:	68d2      	ldr	r2, [r2, #12]
 80039c8:	609a      	str	r2, [r3, #8]
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	6a3a      	ldr	r2, [r7, #32]
 80039d0:	6892      	ldr	r2, [r2, #8]
 80039d2:	605a      	str	r2, [r3, #4]
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	3304      	adds	r3, #4
 80039dc:	429a      	cmp	r2, r3
 80039de:	d103      	bne.n	80039e8 <xTaskRemoveFromEventList+0xa0>
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	605a      	str	r2, [r3, #4]
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	2200      	movs	r2, #0
 80039ec:	615a      	str	r2, [r3, #20]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	1e5a      	subs	r2, r3, #1
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	2201      	movs	r2, #1
 80039fe:	409a      	lsls	r2, r3
 8003a00:	4b37      	ldr	r3, [pc, #220]	; (8003ae0 <xTaskRemoveFromEventList+0x198>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	4a36      	ldr	r2, [pc, #216]	; (8003ae0 <xTaskRemoveFromEventList+0x198>)
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0e:	4935      	ldr	r1, [pc, #212]	; (8003ae4 <xTaskRemoveFromEventList+0x19c>)
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	609a      	str	r2, [r3, #8]
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	60da      	str	r2, [r3, #12]
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	6a3a      	ldr	r2, [r7, #32]
 8003a34:	3204      	adds	r2, #4
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	1d1a      	adds	r2, r3, #4
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	609a      	str	r2, [r3, #8]
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4a25      	ldr	r2, [pc, #148]	; (8003ae4 <xTaskRemoveFromEventList+0x19c>)
 8003a4e:	441a      	add	r2, r3
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	615a      	str	r2, [r3, #20]
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a58:	4922      	ldr	r1, [pc, #136]	; (8003ae4 <xTaskRemoveFromEventList+0x19c>)
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	1c59      	adds	r1, r3, #1
 8003a68:	481e      	ldr	r0, [pc, #120]	; (8003ae4 <xTaskRemoveFromEventList+0x19c>)
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4403      	add	r3, r0
 8003a74:	6019      	str	r1, [r3, #0]
 8003a76:	e01b      	b.n	8003ab0 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a78:	4b1b      	ldr	r3, [pc, #108]	; (8003ae8 <xTaskRemoveFromEventList+0x1a0>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	61da      	str	r2, [r3, #28]
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	621a      	str	r2, [r3, #32]
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	6a3a      	ldr	r2, [r7, #32]
 8003a92:	3218      	adds	r2, #24
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	f103 0218 	add.w	r2, r3, #24
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	609a      	str	r2, [r3, #8]
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	4a11      	ldr	r2, [pc, #68]	; (8003ae8 <xTaskRemoveFromEventList+0x1a0>)
 8003aa4:	629a      	str	r2, [r3, #40]	; 0x28
 8003aa6:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <xTaskRemoveFromEventList+0x1a0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	4a0e      	ldr	r2, [pc, #56]	; (8003ae8 <xTaskRemoveFromEventList+0x1a0>)
 8003aae:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab4:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <xTaskRemoveFromEventList+0x1a4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d905      	bls.n	8003aca <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <xTaskRemoveFromEventList+0x1a8>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	e001      	b.n	8003ace <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	372c      	adds	r7, #44	; 0x2c
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	200001c8 	.word	0x200001c8
 8003ae0:	200001a8 	.word	0x200001a8
 8003ae4:	200000cc 	.word	0x200000cc
 8003ae8:	20000160 	.word	0x20000160
 8003aec:	200000c8 	.word	0x200000c8
 8003af0:	200001b4 	.word	0x200001b4

08003af4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003afc:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <vTaskInternalSetTimeOutState+0x24>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003b04:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <vTaskInternalSetTimeOutState+0x28>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	605a      	str	r2, [r3, #4]
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	200001b8 	.word	0x200001b8
 8003b1c:	200001a4 	.word	0x200001a4

08003b20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b088      	sub	sp, #32
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	613b      	str	r3, [r7, #16]
    }
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10a      	bne.n	8003b62 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	60fb      	str	r3, [r7, #12]
    }
 8003b5e:	bf00      	nop
 8003b60:	e7fe      	b.n	8003b60 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003b62:	f000 ff61 	bl	8004a28 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003b66:	4b1f      	ldr	r3, [pc, #124]	; (8003be4 <xTaskCheckForTimeOut+0xc4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b7e:	d102      	bne.n	8003b86 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003b80:	2300      	movs	r3, #0
 8003b82:	61fb      	str	r3, [r7, #28]
 8003b84:	e026      	b.n	8003bd4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	4b17      	ldr	r3, [pc, #92]	; (8003be8 <xTaskCheckForTimeOut+0xc8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d00a      	beq.n	8003ba8 <xTaskCheckForTimeOut+0x88>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d305      	bcc.n	8003ba8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	e015      	b.n	8003bd4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d20b      	bcs.n	8003bca <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	1ad2      	subs	r2, r2, r3
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff ff98 	bl	8003af4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	e004      	b.n	8003bd4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003bd4:	f000 ff58 	bl	8004a88 <vPortExitCritical>

    return xReturn;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3720      	adds	r7, #32
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	200001a4 	.word	0x200001a4
 8003be8:	200001b8 	.word	0x200001b8

08003bec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003bf0:	4b03      	ldr	r3, [pc, #12]	; (8003c00 <vTaskMissedYield+0x14>)
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]
}
 8003bf6:	bf00      	nop
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	200001b4 	.word	0x200001b4

08003c04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003c0c:	f000 f852 	bl	8003cb4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <prvIdleTask+0x28>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d9f9      	bls.n	8003c0c <prvIdleTask+0x8>
            {
                taskYIELD();
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <prvIdleTask+0x2c>)
 8003c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003c28:	e7f0      	b.n	8003c0c <prvIdleTask+0x8>
 8003c2a:	bf00      	nop
 8003c2c:	200000cc 	.word	0x200000cc
 8003c30:	e000ed04 	.word	0xe000ed04

08003c34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	607b      	str	r3, [r7, #4]
 8003c3e:	e00c      	b.n	8003c5a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4a12      	ldr	r2, [pc, #72]	; (8003c94 <prvInitialiseTaskLists+0x60>)
 8003c4c:	4413      	add	r3, r2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe fb4a 	bl	80022e8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3301      	adds	r3, #1
 8003c58:	607b      	str	r3, [r7, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d9ef      	bls.n	8003c40 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003c60:	480d      	ldr	r0, [pc, #52]	; (8003c98 <prvInitialiseTaskLists+0x64>)
 8003c62:	f7fe fb41 	bl	80022e8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003c66:	480d      	ldr	r0, [pc, #52]	; (8003c9c <prvInitialiseTaskLists+0x68>)
 8003c68:	f7fe fb3e 	bl	80022e8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003c6c:	480c      	ldr	r0, [pc, #48]	; (8003ca0 <prvInitialiseTaskLists+0x6c>)
 8003c6e:	f7fe fb3b 	bl	80022e8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003c72:	480c      	ldr	r0, [pc, #48]	; (8003ca4 <prvInitialiseTaskLists+0x70>)
 8003c74:	f7fe fb38 	bl	80022e8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003c78:	480b      	ldr	r0, [pc, #44]	; (8003ca8 <prvInitialiseTaskLists+0x74>)
 8003c7a:	f7fe fb35 	bl	80022e8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <prvInitialiseTaskLists+0x78>)
 8003c80:	4a05      	ldr	r2, [pc, #20]	; (8003c98 <prvInitialiseTaskLists+0x64>)
 8003c82:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c84:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <prvInitialiseTaskLists+0x7c>)
 8003c86:	4a05      	ldr	r2, [pc, #20]	; (8003c9c <prvInitialiseTaskLists+0x68>)
 8003c88:	601a      	str	r2, [r3, #0]
}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	200000cc 	.word	0x200000cc
 8003c98:	20000130 	.word	0x20000130
 8003c9c:	20000144 	.word	0x20000144
 8003ca0:	20000160 	.word	0x20000160
 8003ca4:	20000174 	.word	0x20000174
 8003ca8:	2000018c 	.word	0x2000018c
 8003cac:	20000158 	.word	0x20000158
 8003cb0:	2000015c 	.word	0x2000015c

08003cb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cba:	e019      	b.n	8003cf0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003cbc:	f000 feb4 	bl	8004a28 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cc0:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <prvCheckTasksWaitingTermination+0x50>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3304      	adds	r3, #4
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fe fb71 	bl	80023b4 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003cd2:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <prvCheckTasksWaitingTermination+0x54>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	4a0b      	ldr	r2, [pc, #44]	; (8003d08 <prvCheckTasksWaitingTermination+0x54>)
 8003cda:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <prvCheckTasksWaitingTermination+0x58>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	4a0a      	ldr	r2, [pc, #40]	; (8003d0c <prvCheckTasksWaitingTermination+0x58>)
 8003ce4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003ce6:	f000 fecf 	bl	8004a88 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f810 	bl	8003d10 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <prvCheckTasksWaitingTermination+0x58>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e1      	bne.n	8003cbc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000174 	.word	0x20000174
 8003d08:	200001a0 	.word	0x200001a0
 8003d0c:	20000188 	.word	0x20000188

08003d10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 ffb9 	bl	8004c94 <vPortFree>
            vPortFree( pxTCB );
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 ffb6 	bl	8004c94 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003d28:	bf00      	nop
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d34:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <prvResetNextTaskUnblockTime+0x30>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d104      	bne.n	8003d48 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003d3e:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <prvResetNextTaskUnblockTime+0x34>)
 8003d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d44:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003d46:	e005      	b.n	8003d54 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <prvResetNextTaskUnblockTime+0x30>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a04      	ldr	r2, [pc, #16]	; (8003d64 <prvResetNextTaskUnblockTime+0x34>)
 8003d52:	6013      	str	r3, [r2, #0]
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	20000158 	.word	0x20000158
 8003d64:	200001c0 	.word	0x200001c0

08003d68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003d6e:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <xTaskGetSchedulerState+0x34>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d102      	bne.n	8003d7c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003d76:	2301      	movs	r3, #1
 8003d78:	607b      	str	r3, [r7, #4]
 8003d7a:	e008      	b.n	8003d8e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d7c:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <xTaskGetSchedulerState+0x38>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d102      	bne.n	8003d8a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003d84:	2302      	movs	r3, #2
 8003d86:	607b      	str	r3, [r7, #4]
 8003d88:	e001      	b.n	8003d8e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003d8e:	687b      	ldr	r3, [r7, #4]
    }
 8003d90:	4618      	mov	r0, r3
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	200001ac 	.word	0x200001ac
 8003da0:	200001c8 	.word	0x200001c8

08003da4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 8087 	beq.w	8003eca <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc0:	4b44      	ldr	r3, [pc, #272]	; (8003ed4 <xTaskPriorityInherit+0x130>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d276      	bcs.n	8003eb8 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	db06      	blt.n	8003de0 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dd2:	4b40      	ldr	r3, [pc, #256]	; (8003ed4 <xTaskPriorityInherit+0x130>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	f1c3 0205 	rsb	r2, r3, #5
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	6959      	ldr	r1, [r3, #20]
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4a39      	ldr	r2, [pc, #228]	; (8003ed8 <xTaskPriorityInherit+0x134>)
 8003df2:	4413      	add	r3, r2
 8003df4:	4299      	cmp	r1, r3
 8003df6:	d157      	bne.n	8003ea8 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fe fad9 	bl	80023b4 <uxListRemove>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10a      	bne.n	8003e1e <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43da      	mvns	r2, r3
 8003e14:	4b31      	ldr	r3, [pc, #196]	; (8003edc <xTaskPriorityInherit+0x138>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	4a30      	ldr	r2, [pc, #192]	; (8003edc <xTaskPriorityInherit+0x138>)
 8003e1c:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003e1e:	4b2d      	ldr	r3, [pc, #180]	; (8003ed4 <xTaskPriorityInherit+0x130>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	4b2a      	ldr	r3, [pc, #168]	; (8003edc <xTaskPriorityInherit+0x138>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	4a29      	ldr	r2, [pc, #164]	; (8003edc <xTaskPriorityInherit+0x138>)
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3e:	4926      	ldr	r1, [pc, #152]	; (8003ed8 <xTaskPriorityInherit+0x134>)
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	609a      	str	r2, [r3, #8]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	60da      	str	r2, [r3, #12]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	3204      	adds	r2, #4
 8003e66:	605a      	str	r2, [r3, #4]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1d1a      	adds	r2, r3, #4
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	609a      	str	r2, [r3, #8]
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4a16      	ldr	r2, [pc, #88]	; (8003ed8 <xTaskPriorityInherit+0x134>)
 8003e7e:	441a      	add	r2, r3
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	615a      	str	r2, [r3, #20]
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e88:	4913      	ldr	r1, [pc, #76]	; (8003ed8 <xTaskPriorityInherit+0x134>)
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	1c59      	adds	r1, r3, #1
 8003e98:	480f      	ldr	r0, [pc, #60]	; (8003ed8 <xTaskPriorityInherit+0x134>)
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4403      	add	r3, r0
 8003ea4:	6019      	str	r1, [r3, #0]
 8003ea6:	e004      	b.n	8003eb2 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003ea8:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <xTaskPriorityInherit+0x130>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	e008      	b.n	8003eca <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <xTaskPriorityInherit+0x130>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d201      	bcs.n	8003eca <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003eca:	697b      	ldr	r3, [r7, #20]
    }
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	200000c8 	.word	0x200000c8
 8003ed8:	200000cc 	.word	0x200000cc
 8003edc:	200001a8 	.word	0x200001a8

08003ee0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 808c 	beq.w	8004010 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003ef8:	4b48      	ldr	r3, [pc, #288]	; (800401c <xTaskPriorityDisinherit+0x13c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d00a      	beq.n	8003f18 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	613b      	str	r3, [r7, #16]
    }
 8003f14:	bf00      	nop
 8003f16:	e7fe      	b.n	8003f16 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	60fb      	str	r3, [r7, #12]
    }
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3a:	1e5a      	subs	r2, r3, #1
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d061      	beq.n	8004010 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d15d      	bne.n	8004010 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fe fa2b 	bl	80023b4 <uxListRemove>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	2201      	movs	r2, #1
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	43da      	mvns	r2, r3
 8003f70:	4b2b      	ldr	r3, [pc, #172]	; (8004020 <xTaskPriorityDisinherit+0x140>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4013      	ands	r3, r2
 8003f76:	4a2a      	ldr	r2, [pc, #168]	; (8004020 <xTaskPriorityDisinherit+0x140>)
 8003f78:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f86:	f1c3 0205 	rsb	r2, r3, #5
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	2201      	movs	r2, #1
 8003f94:	409a      	lsls	r2, r3
 8003f96:	4b22      	ldr	r3, [pc, #136]	; (8004020 <xTaskPriorityDisinherit+0x140>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	4a20      	ldr	r2, [pc, #128]	; (8004020 <xTaskPriorityDisinherit+0x140>)
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa4:	491f      	ldr	r1, [pc, #124]	; (8004024 <xTaskPriorityDisinherit+0x144>)
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	609a      	str	r2, [r3, #8]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	60da      	str	r2, [r3, #12]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	3204      	adds	r2, #4
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	1d1a      	adds	r2, r3, #4
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	609a      	str	r2, [r3, #8]
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fda:	4613      	mov	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4a10      	ldr	r2, [pc, #64]	; (8004024 <xTaskPriorityDisinherit+0x144>)
 8003fe4:	441a      	add	r2, r3
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	615a      	str	r2, [r3, #20]
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fee:	490d      	ldr	r1, [pc, #52]	; (8004024 <xTaskPriorityDisinherit+0x144>)
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	1c59      	adds	r1, r3, #1
 8003ffe:	4809      	ldr	r0, [pc, #36]	; (8004024 <xTaskPriorityDisinherit+0x144>)
 8004000:	4613      	mov	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4403      	add	r3, r0
 800400a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800400c:	2301      	movs	r3, #1
 800400e:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004010:	69fb      	ldr	r3, [r7, #28]
    }
 8004012:	4618      	mov	r0, r3
 8004014:	3720      	adds	r7, #32
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	200000c8 	.word	0x200000c8
 8004020:	200001a8 	.word	0x200001a8
 8004024:	200000cc 	.word	0x200000cc

08004028 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	; 0x28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004036:	2301      	movs	r3, #1
 8004038:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80a1 	beq.w	8004184 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10a      	bne.n	8004060 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	613b      	str	r3, [r7, #16]
    }
 800405c:	bf00      	nop
 800405e:	e7fe      	b.n	800405e <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d902      	bls.n	8004070 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
 800406e:	e002      	b.n	8004076 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407c:	429a      	cmp	r2, r3
 800407e:	f000 8081 	beq.w	8004184 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	429a      	cmp	r2, r3
 800408a:	d17b      	bne.n	8004184 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800408c:	4b3f      	ldr	r3, [pc, #252]	; (800418c <vTaskPriorityDisinheritAfterTimeout+0x164>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6a3a      	ldr	r2, [r7, #32]
 8004092:	429a      	cmp	r2, r3
 8004094:	d10a      	bne.n	80040ac <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 8004096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	60fb      	str	r3, [r7, #12]
    }
 80040a8:	bf00      	nop
 80040aa:	e7fe      	b.n	80040aa <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	db04      	blt.n	80040ca <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	f1c3 0205 	rsb	r2, r3, #5
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	6959      	ldr	r1, [r3, #20]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4a2d      	ldr	r2, [pc, #180]	; (8004190 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80040da:	4413      	add	r3, r2
 80040dc:	4299      	cmp	r1, r3
 80040de:	d151      	bne.n	8004184 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	3304      	adds	r3, #4
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fe f965 	bl	80023b4 <uxListRemove>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10a      	bne.n	8004106 <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	2201      	movs	r2, #1
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43da      	mvns	r2, r3
 80040fc:	4b25      	ldr	r3, [pc, #148]	; (8004194 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4013      	ands	r3, r2
 8004102:	4a24      	ldr	r2, [pc, #144]	; (8004194 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8004104:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	2201      	movs	r2, #1
 800410c:	409a      	lsls	r2, r3
 800410e:	4b21      	ldr	r3, [pc, #132]	; (8004194 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4313      	orrs	r3, r2
 8004114:	4a1f      	ldr	r2, [pc, #124]	; (8004194 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411c:	491c      	ldr	r1, [pc, #112]	; (8004190 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	3304      	adds	r3, #4
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	609a      	str	r2, [r3, #8]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	60da      	str	r2, [r3, #12]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	6a3a      	ldr	r2, [r7, #32]
 8004142:	3204      	adds	r2, #4
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	1d1a      	adds	r2, r3, #4
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	609a      	str	r2, [r3, #8]
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004152:	4613      	mov	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4a0d      	ldr	r2, [pc, #52]	; (8004190 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800415c:	441a      	add	r2, r3
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	615a      	str	r2, [r3, #20]
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004166:	490a      	ldr	r1, [pc, #40]	; (8004190 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8004168:	4613      	mov	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	1c59      	adds	r1, r3, #1
 8004176:	4806      	ldr	r0, [pc, #24]	; (8004190 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4403      	add	r3, r0
 8004182:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004184:	bf00      	nop
 8004186:	3728      	adds	r7, #40	; 0x28
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	200000c8 	.word	0x200000c8
 8004190:	200000cc 	.word	0x200000cc
 8004194:	200001a8 	.word	0x200001a8

08004198 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800419c:	4b07      	ldr	r3, [pc, #28]	; (80041bc <pvTaskIncrementMutexHeldCount+0x24>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d004      	beq.n	80041ae <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <pvTaskIncrementMutexHeldCount+0x24>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041aa:	3201      	adds	r2, #1
 80041ac:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 80041ae:	4b03      	ldr	r3, [pc, #12]	; (80041bc <pvTaskIncrementMutexHeldCount+0x24>)
 80041b0:	681b      	ldr	r3, [r3, #0]
    }
 80041b2:	4618      	mov	r0, r3
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	200000c8 	.word	0x200000c8

080041c0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80041ca:	4b36      	ldr	r3, [pc, #216]	; (80042a4 <prvAddCurrentTaskToDelayedList+0xe4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041d0:	4b35      	ldr	r3, [pc, #212]	; (80042a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3304      	adds	r3, #4
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fe f8ec 	bl	80023b4 <uxListRemove>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10b      	bne.n	80041fa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80041e2:	4b31      	ldr	r3, [pc, #196]	; (80042a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	2201      	movs	r2, #1
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	43da      	mvns	r2, r3
 80041f0:	4b2e      	ldr	r3, [pc, #184]	; (80042ac <prvAddCurrentTaskToDelayedList+0xec>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4013      	ands	r3, r2
 80041f6:	4a2d      	ldr	r2, [pc, #180]	; (80042ac <prvAddCurrentTaskToDelayedList+0xec>)
 80041f8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004200:	d124      	bne.n	800424c <prvAddCurrentTaskToDelayedList+0x8c>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d021      	beq.n	800424c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004208:	4b29      	ldr	r3, [pc, #164]	; (80042b0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	4b26      	ldr	r3, [pc, #152]	; (80042a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	609a      	str	r2, [r3, #8]
 8004216:	4b24      	ldr	r3, [pc, #144]	; (80042a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	6892      	ldr	r2, [r2, #8]
 800421e:	60da      	str	r2, [r3, #12]
 8004220:	4b21      	ldr	r3, [pc, #132]	; (80042a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	3204      	adds	r2, #4
 800422a:	605a      	str	r2, [r3, #4]
 800422c:	4b1e      	ldr	r3, [pc, #120]	; (80042a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	1d1a      	adds	r2, r3, #4
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	609a      	str	r2, [r3, #8]
 8004236:	4b1c      	ldr	r3, [pc, #112]	; (80042a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1d      	ldr	r2, [pc, #116]	; (80042b0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800423c:	615a      	str	r2, [r3, #20]
 800423e:	4b1c      	ldr	r3, [pc, #112]	; (80042b0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3301      	adds	r3, #1
 8004244:	4a1a      	ldr	r2, [pc, #104]	; (80042b0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800424a:	e026      	b.n	800429a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4413      	add	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004254:	4b14      	ldr	r3, [pc, #80]	; (80042a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	429a      	cmp	r2, r3
 8004262:	d209      	bcs.n	8004278 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004264:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4b0f      	ldr	r3, [pc, #60]	; (80042a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3304      	adds	r3, #4
 800426e:	4619      	mov	r1, r3
 8004270:	4610      	mov	r0, r2
 8004272:	f7fe f866 	bl	8002342 <vListInsert>
}
 8004276:	e010      	b.n	800429a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004278:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <prvAddCurrentTaskToDelayedList+0xf8>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3304      	adds	r3, #4
 8004282:	4619      	mov	r1, r3
 8004284:	4610      	mov	r0, r2
 8004286:	f7fe f85c 	bl	8002342 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800428a:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <prvAddCurrentTaskToDelayedList+0xfc>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	429a      	cmp	r2, r3
 8004292:	d202      	bcs.n	800429a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004294:	4a09      	ldr	r2, [pc, #36]	; (80042bc <prvAddCurrentTaskToDelayedList+0xfc>)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6013      	str	r3, [r2, #0]
}
 800429a:	bf00      	nop
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	200001a4 	.word	0x200001a4
 80042a8:	200000c8 	.word	0x200000c8
 80042ac:	200001a8 	.word	0x200001a8
 80042b0:	2000018c 	.word	0x2000018c
 80042b4:	2000015c 	.word	0x2000015c
 80042b8:	20000158 	.word	0x20000158
 80042bc:	200001c0 	.word	0x200001c0

080042c0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80042c6:	2300      	movs	r3, #0
 80042c8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80042ca:	f000 fa47 	bl	800475c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80042ce:	4b11      	ldr	r3, [pc, #68]	; (8004314 <xTimerCreateTimerTask+0x54>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00b      	beq.n	80042ee <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80042d6:	4b10      	ldr	r3, [pc, #64]	; (8004318 <xTimerCreateTimerTask+0x58>)
 80042d8:	9301      	str	r3, [sp, #4]
 80042da:	2302      	movs	r3, #2
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	2300      	movs	r3, #0
 80042e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80042e4:	490d      	ldr	r1, [pc, #52]	; (800431c <xTimerCreateTimerTask+0x5c>)
 80042e6:	480e      	ldr	r0, [pc, #56]	; (8004320 <xTimerCreateTimerTask+0x60>)
 80042e8:	f7fe fe48 	bl	8002f7c <xTaskCreate>
 80042ec:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10a      	bne.n	800430a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	603b      	str	r3, [r7, #0]
    }
 8004306:	bf00      	nop
 8004308:	e7fe      	b.n	8004308 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800430a:	687b      	ldr	r3, [r7, #4]
    }
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	200001fc 	.word	0x200001fc
 8004318:	20000200 	.word	0x20000200
 800431c:	08004da0 	.word	0x08004da0
 8004320:	080043c9 	.word	0x080043c9

08004324 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004330:	e008      	b.n	8004344 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	4413      	add	r3, r2
 800433a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	699a      	ldr	r2, [r3, #24]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	18d1      	adds	r1, r2, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f8dd 	bl	8004510 <prvInsertTimerInActiveList>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1ea      	bne.n	8004332 <prvReloadTimer+0xe>
        }
    }
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004372:	4b14      	ldr	r3, [pc, #80]	; (80043c4 <prvProcessExpiredTimer+0x5c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3304      	adds	r3, #4
 8004380:	4618      	mov	r0, r3
 8004382:	f7fe f817 	bl	80023b4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f7ff ffc3 	bl	8004324 <prvReloadTimer>
 800439e:	e008      	b.n	80043b2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043a6:	f023 0301 	bic.w	r3, r3, #1
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	4798      	blx	r3
    }
 80043ba:	bf00      	nop
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	200001f4 	.word	0x200001f4

080043c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043d0:	f107 0308 	add.w	r3, r7, #8
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 f857 	bl	8004488 <prvGetNextExpireTime>
 80043da:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4619      	mov	r1, r3
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 f803 	bl	80043ec <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80043e6:	f000 f8d5 	bl	8004594 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043ea:	e7f1      	b.n	80043d0 <prvTimerTask+0x8>

080043ec <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80043f6:	f7fe ffb1 	bl	800335c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043fa:	f107 0308 	add.w	r3, r7, #8
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 f866 	bl	80044d0 <prvSampleTimeNow>
 8004404:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d130      	bne.n	800446e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10a      	bne.n	8004428 <prvProcessTimerOrBlockTask+0x3c>
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	429a      	cmp	r2, r3
 8004418:	d806      	bhi.n	8004428 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800441a:	f7fe ffad 	bl	8003378 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800441e:	68f9      	ldr	r1, [r7, #12]
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7ff ffa1 	bl	8004368 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004426:	e024      	b.n	8004472 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d008      	beq.n	8004440 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800442e:	4b13      	ldr	r3, [pc, #76]	; (800447c <prvProcessTimerOrBlockTask+0x90>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <prvProcessTimerOrBlockTask+0x50>
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <prvProcessTimerOrBlockTask+0x52>
 800443c:	2300      	movs	r3, #0
 800443e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004440:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <prvProcessTimerOrBlockTask+0x94>)
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	4619      	mov	r1, r3
 800444e:	f7fe fd61 	bl	8002f14 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004452:	f7fe ff91 	bl	8003378 <xTaskResumeAll>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10a      	bne.n	8004472 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800445c:	4b09      	ldr	r3, [pc, #36]	; (8004484 <prvProcessTimerOrBlockTask+0x98>)
 800445e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	f3bf 8f6f 	isb	sy
    }
 800446c:	e001      	b.n	8004472 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800446e:	f7fe ff83 	bl	8003378 <xTaskResumeAll>
    }
 8004472:	bf00      	nop
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	200001f8 	.word	0x200001f8
 8004480:	200001fc 	.word	0x200001fc
 8004484:	e000ed04 	.word	0xe000ed04

08004488 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004490:	4b0e      	ldr	r3, [pc, #56]	; (80044cc <prvGetNextExpireTime+0x44>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <prvGetNextExpireTime+0x16>
 800449a:	2201      	movs	r2, #1
 800449c:	e000      	b.n	80044a0 <prvGetNextExpireTime+0x18>
 800449e:	2200      	movs	r2, #0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d105      	bne.n	80044b8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044ac:	4b07      	ldr	r3, [pc, #28]	; (80044cc <prvGetNextExpireTime+0x44>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	e001      	b.n	80044bc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80044bc:	68fb      	ldr	r3, [r7, #12]
    }
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	200001f4 	.word	0x200001f4

080044d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80044d8:	f7ff f84a 	bl	8003570 <xTaskGetTickCount>
 80044dc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80044de:	4b0b      	ldr	r3, [pc, #44]	; (800450c <prvSampleTimeNow+0x3c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d205      	bcs.n	80044f4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80044e8:	f000 f912 	bl	8004710 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	e002      	b.n	80044fa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80044fa:	4a04      	ldr	r2, [pc, #16]	; (800450c <prvSampleTimeNow+0x3c>)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004500:	68fb      	ldr	r3, [r7, #12]
    }
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20000204 	.word	0x20000204

08004510 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
 800451c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	429a      	cmp	r2, r3
 8004534:	d812      	bhi.n	800455c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	1ad2      	subs	r2, r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	429a      	cmp	r2, r3
 8004542:	d302      	bcc.n	800454a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004544:	2301      	movs	r3, #1
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	e01b      	b.n	8004582 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800454a:	4b10      	ldr	r3, [pc, #64]	; (800458c <prvInsertTimerInActiveList+0x7c>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3304      	adds	r3, #4
 8004552:	4619      	mov	r1, r3
 8004554:	4610      	mov	r0, r2
 8004556:	f7fd fef4 	bl	8002342 <vListInsert>
 800455a:	e012      	b.n	8004582 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d206      	bcs.n	8004572 <prvInsertTimerInActiveList+0x62>
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d302      	bcc.n	8004572 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800456c:	2301      	movs	r3, #1
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	e007      	b.n	8004582 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004572:	4b07      	ldr	r3, [pc, #28]	; (8004590 <prvInsertTimerInActiveList+0x80>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	3304      	adds	r3, #4
 800457a:	4619      	mov	r1, r3
 800457c:	4610      	mov	r0, r2
 800457e:	f7fd fee0 	bl	8002342 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004582:	697b      	ldr	r3, [r7, #20]
    }
 8004584:	4618      	mov	r0, r3
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	200001f8 	.word	0x200001f8
 8004590:	200001f4 	.word	0x200001f4

08004594 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800459a:	e0a6      	b.n	80046ea <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f2c0 80a3 	blt.w	80046ea <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d004      	beq.n	80045ba <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	3304      	adds	r3, #4
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fd fefd 	bl	80023b4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045ba:	1d3b      	adds	r3, r7, #4
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff ff87 	bl	80044d0 <prvSampleTimeNow>
 80045c2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	f200 808d 	bhi.w	80046e8 <prvProcessReceivedCommands+0x154>
 80045ce:	a201      	add	r2, pc, #4	; (adr r2, 80045d4 <prvProcessReceivedCommands+0x40>)
 80045d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d4:	080045f9 	.word	0x080045f9
 80045d8:	080045f9 	.word	0x080045f9
 80045dc:	08004661 	.word	0x08004661
 80045e0:	08004675 	.word	0x08004675
 80045e4:	080046bf 	.word	0x080046bf
 80045e8:	080045f9 	.word	0x080045f9
 80045ec:	080045f9 	.word	0x080045f9
 80045f0:	08004661 	.word	0x08004661
 80045f4:	08004675 	.word	0x08004675
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	b2da      	uxtb	r2, r3
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	18d1      	adds	r1, r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	69f8      	ldr	r0, [r7, #28]
 8004618:	f7ff ff7a 	bl	8004510 <prvInsertTimerInActiveList>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d063      	beq.n	80046ea <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d009      	beq.n	8004644 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	4413      	add	r3, r2
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4619      	mov	r1, r3
 800463c:	69f8      	ldr	r0, [r7, #28]
 800463e:	f7ff fe71 	bl	8004324 <prvReloadTimer>
 8004642:	e008      	b.n	8004656 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800464a:	f023 0301 	bic.w	r3, r3, #1
 800464e:	b2da      	uxtb	r2, r3
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	69f8      	ldr	r0, [r7, #28]
 800465c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800465e:	e044      	b.n	80046ea <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	b2da      	uxtb	r2, r3
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004672:	e03a      	b.n	80046ea <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	b2da      	uxtb	r2, r3
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	617b      	str	r3, [r7, #20]
    }
 80046a6:	bf00      	nop
 80046a8:	e7fe      	b.n	80046a8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	18d1      	adds	r1, r2, r3
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	69f8      	ldr	r0, [r7, #28]
 80046b8:	f7ff ff2a 	bl	8004510 <prvInsertTimerInActiveList>
                        break;
 80046bc:	e015      	b.n	80046ea <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d103      	bne.n	80046d4 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80046cc:	69f8      	ldr	r0, [r7, #28]
 80046ce:	f000 fae1 	bl	8004c94 <vPortFree>
 80046d2:	e00a      	b.n	80046ea <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046da:	f023 0301 	bic.w	r3, r3, #1
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80046e6:	e000      	b.n	80046ea <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 80046e8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046ea:	4b08      	ldr	r3, [pc, #32]	; (800470c <prvProcessReceivedCommands+0x178>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f107 0108 	add.w	r1, r7, #8
 80046f2:	2200      	movs	r2, #0
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fe f8b9 	bl	800286c <xQueueReceive>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f47f af4d 	bne.w	800459c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004702:	bf00      	nop
 8004704:	bf00      	nop
 8004706:	3720      	adds	r7, #32
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	200001fc 	.word	0x200001fc

08004710 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004716:	e009      	b.n	800472c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004718:	4b0e      	ldr	r3, [pc, #56]	; (8004754 <prvSwitchTimerLists+0x44>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004722:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004726:	6838      	ldr	r0, [r7, #0]
 8004728:	f7ff fe1e 	bl	8004368 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800472c:	4b09      	ldr	r3, [pc, #36]	; (8004754 <prvSwitchTimerLists+0x44>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f0      	bne.n	8004718 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004736:	4b07      	ldr	r3, [pc, #28]	; (8004754 <prvSwitchTimerLists+0x44>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <prvSwitchTimerLists+0x48>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a04      	ldr	r2, [pc, #16]	; (8004754 <prvSwitchTimerLists+0x44>)
 8004742:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004744:	4a04      	ldr	r2, [pc, #16]	; (8004758 <prvSwitchTimerLists+0x48>)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6013      	str	r3, [r2, #0]
    }
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	200001f4 	.word	0x200001f4
 8004758:	200001f8 	.word	0x200001f8

0800475c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004760:	f000 f962 	bl	8004a28 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004764:	4b12      	ldr	r3, [pc, #72]	; (80047b0 <prvCheckForValidListAndQueue+0x54>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d11d      	bne.n	80047a8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800476c:	4811      	ldr	r0, [pc, #68]	; (80047b4 <prvCheckForValidListAndQueue+0x58>)
 800476e:	f7fd fdbb 	bl	80022e8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004772:	4811      	ldr	r0, [pc, #68]	; (80047b8 <prvCheckForValidListAndQueue+0x5c>)
 8004774:	f7fd fdb8 	bl	80022e8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004778:	4b10      	ldr	r3, [pc, #64]	; (80047bc <prvCheckForValidListAndQueue+0x60>)
 800477a:	4a0e      	ldr	r2, [pc, #56]	; (80047b4 <prvCheckForValidListAndQueue+0x58>)
 800477c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800477e:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <prvCheckForValidListAndQueue+0x64>)
 8004780:	4a0d      	ldr	r2, [pc, #52]	; (80047b8 <prvCheckForValidListAndQueue+0x5c>)
 8004782:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004784:	2200      	movs	r2, #0
 8004786:	210c      	movs	r1, #12
 8004788:	200a      	movs	r0, #10
 800478a:	f7fd fecd 	bl	8002528 <xQueueGenericCreate>
 800478e:	4603      	mov	r3, r0
 8004790:	4a07      	ldr	r2, [pc, #28]	; (80047b0 <prvCheckForValidListAndQueue+0x54>)
 8004792:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004794:	4b06      	ldr	r3, [pc, #24]	; (80047b0 <prvCheckForValidListAndQueue+0x54>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800479c:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <prvCheckForValidListAndQueue+0x54>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4908      	ldr	r1, [pc, #32]	; (80047c4 <prvCheckForValidListAndQueue+0x68>)
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fe fb68 	bl	8002e78 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80047a8:	f000 f96e 	bl	8004a88 <vPortExitCritical>
    }
 80047ac:	bf00      	nop
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	200001fc 	.word	0x200001fc
 80047b4:	200001cc 	.word	0x200001cc
 80047b8:	200001e0 	.word	0x200001e0
 80047bc:	200001f4 	.word	0x200001f4
 80047c0:	200001f8 	.word	0x200001f8
 80047c4:	08004da8 	.word	0x08004da8

080047c8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3b04      	subs	r3, #4
 80047d8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047e0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3b04      	subs	r3, #4
 80047e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f023 0201 	bic.w	r2, r3, #1
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3b04      	subs	r3, #4
 80047f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80047f8:	4a0c      	ldr	r2, [pc, #48]	; (800482c <pxPortInitialiseStack+0x64>)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	3b14      	subs	r3, #20
 8004802:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3b04      	subs	r3, #4
 800480e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f06f 0202 	mvn.w	r2, #2
 8004816:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3b20      	subs	r3, #32
 800481c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800481e:	68fb      	ldr	r3, [r7, #12]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	08004831 	.word	0x08004831

08004830 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800483a:	4b12      	ldr	r3, [pc, #72]	; (8004884 <prvTaskExitError+0x54>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004842:	d00a      	beq.n	800485a <prvTaskExitError+0x2a>
        __asm volatile
 8004844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	60fb      	str	r3, [r7, #12]
    }
 8004856:	bf00      	nop
 8004858:	e7fe      	b.n	8004858 <prvTaskExitError+0x28>
        __asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	60bb      	str	r3, [r7, #8]
    }
 800486c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800486e:	bf00      	nop
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0fc      	beq.n	8004870 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004876:	bf00      	nop
 8004878:	bf00      	nop
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	20000010 	.word	0x20000010
	...

08004890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004890:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <pxCurrentTCBConst2>)
 8004892:	6819      	ldr	r1, [r3, #0]
 8004894:	6808      	ldr	r0, [r1, #0]
 8004896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489a:	f380 8809 	msr	PSP, r0
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f04f 0000 	mov.w	r0, #0
 80048a6:	f380 8811 	msr	BASEPRI, r0
 80048aa:	4770      	bx	lr
 80048ac:	f3af 8000 	nop.w

080048b0 <pxCurrentTCBConst2>:
 80048b0:	200000c8 	.word	0x200000c8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop

080048b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80048b8:	4808      	ldr	r0, [pc, #32]	; (80048dc <prvPortStartFirstTask+0x24>)
 80048ba:	6800      	ldr	r0, [r0, #0]
 80048bc:	6800      	ldr	r0, [r0, #0]
 80048be:	f380 8808 	msr	MSP, r0
 80048c2:	f04f 0000 	mov.w	r0, #0
 80048c6:	f380 8814 	msr	CONTROL, r0
 80048ca:	b662      	cpsie	i
 80048cc:	b661      	cpsie	f
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	df00      	svc	0
 80048d8:	bf00      	nop
 80048da:	0000      	.short	0x0000
 80048dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop

080048e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048ea:	4b46      	ldr	r3, [pc, #280]	; (8004a04 <xPortStartScheduler+0x120>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a46      	ldr	r2, [pc, #280]	; (8004a08 <xPortStartScheduler+0x124>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d10a      	bne.n	800490a <xPortStartScheduler+0x26>
        __asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	613b      	str	r3, [r7, #16]
    }
 8004906:	bf00      	nop
 8004908:	e7fe      	b.n	8004908 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800490a:	4b3e      	ldr	r3, [pc, #248]	; (8004a04 <xPortStartScheduler+0x120>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a3f      	ldr	r2, [pc, #252]	; (8004a0c <xPortStartScheduler+0x128>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d10a      	bne.n	800492a <xPortStartScheduler+0x46>
        __asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	60fb      	str	r3, [r7, #12]
    }
 8004926:	bf00      	nop
 8004928:	e7fe      	b.n	8004928 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800492a:	4b39      	ldr	r3, [pc, #228]	; (8004a10 <xPortStartScheduler+0x12c>)
 800492c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	22ff      	movs	r2, #255	; 0xff
 800493a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800494c:	b2da      	uxtb	r2, r3
 800494e:	4b31      	ldr	r3, [pc, #196]	; (8004a14 <xPortStartScheduler+0x130>)
 8004950:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004952:	4b31      	ldr	r3, [pc, #196]	; (8004a18 <xPortStartScheduler+0x134>)
 8004954:	2207      	movs	r2, #7
 8004956:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004958:	e009      	b.n	800496e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800495a:	4b2f      	ldr	r3, [pc, #188]	; (8004a18 <xPortStartScheduler+0x134>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3b01      	subs	r3, #1
 8004960:	4a2d      	ldr	r2, [pc, #180]	; (8004a18 <xPortStartScheduler+0x134>)
 8004962:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	b2db      	uxtb	r3, r3
 800496c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800496e:	78fb      	ldrb	r3, [r7, #3]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004976:	2b80      	cmp	r3, #128	; 0x80
 8004978:	d0ef      	beq.n	800495a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800497a:	4b27      	ldr	r3, [pc, #156]	; (8004a18 <xPortStartScheduler+0x134>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f1c3 0307 	rsb	r3, r3, #7
 8004982:	2b04      	cmp	r3, #4
 8004984:	d00a      	beq.n	800499c <xPortStartScheduler+0xb8>
        __asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	60bb      	str	r3, [r7, #8]
    }
 8004998:	bf00      	nop
 800499a:	e7fe      	b.n	800499a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800499c:	4b1e      	ldr	r3, [pc, #120]	; (8004a18 <xPortStartScheduler+0x134>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	4a1d      	ldr	r2, [pc, #116]	; (8004a18 <xPortStartScheduler+0x134>)
 80049a4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049a6:	4b1c      	ldr	r3, [pc, #112]	; (8004a18 <xPortStartScheduler+0x134>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049ae:	4a1a      	ldr	r2, [pc, #104]	; (8004a18 <xPortStartScheduler+0x134>)
 80049b0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80049ba:	4b18      	ldr	r3, [pc, #96]	; (8004a1c <xPortStartScheduler+0x138>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a17      	ldr	r2, [pc, #92]	; (8004a1c <xPortStartScheduler+0x138>)
 80049c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049c4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80049c6:	4b15      	ldr	r3, [pc, #84]	; (8004a1c <xPortStartScheduler+0x138>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a14      	ldr	r2, [pc, #80]	; (8004a1c <xPortStartScheduler+0x138>)
 80049cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80049d0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80049d2:	f000 f8db 	bl	8004b8c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80049d6:	4b12      	ldr	r3, [pc, #72]	; (8004a20 <xPortStartScheduler+0x13c>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80049dc:	f000 f8fa 	bl	8004bd4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049e0:	4b10      	ldr	r3, [pc, #64]	; (8004a24 <xPortStartScheduler+0x140>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a0f      	ldr	r2, [pc, #60]	; (8004a24 <xPortStartScheduler+0x140>)
 80049e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80049ea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80049ec:	f7ff ff64 	bl	80048b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80049f0:	f7fe fee4 	bl	80037bc <vTaskSwitchContext>
    prvTaskExitError();
 80049f4:	f7ff ff1c 	bl	8004830 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	e000ed00 	.word	0xe000ed00
 8004a08:	410fc271 	.word	0x410fc271
 8004a0c:	410fc270 	.word	0x410fc270
 8004a10:	e000e400 	.word	0xe000e400
 8004a14:	20000208 	.word	0x20000208
 8004a18:	2000020c 	.word	0x2000020c
 8004a1c:	e000ed20 	.word	0xe000ed20
 8004a20:	20000010 	.word	0x20000010
 8004a24:	e000ef34 	.word	0xe000ef34

08004a28 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
        __asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	607b      	str	r3, [r7, #4]
    }
 8004a40:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004a42:	4b0f      	ldr	r3, [pc, #60]	; (8004a80 <vPortEnterCritical+0x58>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3301      	adds	r3, #1
 8004a48:	4a0d      	ldr	r2, [pc, #52]	; (8004a80 <vPortEnterCritical+0x58>)
 8004a4a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004a4c:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <vPortEnterCritical+0x58>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d10f      	bne.n	8004a74 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a54:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <vPortEnterCritical+0x5c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <vPortEnterCritical+0x4c>
        __asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	603b      	str	r3, [r7, #0]
    }
 8004a70:	bf00      	nop
 8004a72:	e7fe      	b.n	8004a72 <vPortEnterCritical+0x4a>
    }
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	20000010 	.word	0x20000010
 8004a84:	e000ed04 	.word	0xe000ed04

08004a88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004a8e:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <vPortExitCritical+0x50>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10a      	bne.n	8004aac <vPortExitCritical+0x24>
        __asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	607b      	str	r3, [r7, #4]
    }
 8004aa8:	bf00      	nop
 8004aaa:	e7fe      	b.n	8004aaa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <vPortExitCritical+0x50>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	4a09      	ldr	r2, [pc, #36]	; (8004ad8 <vPortExitCritical+0x50>)
 8004ab4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004ab6:	4b08      	ldr	r3, [pc, #32]	; (8004ad8 <vPortExitCritical+0x50>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d105      	bne.n	8004aca <vPortExitCritical+0x42>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004ac8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20000010 	.word	0x20000010
 8004adc:	00000000 	.word	0x00000000

08004ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004ae0:	f3ef 8009 	mrs	r0, PSP
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	4b15      	ldr	r3, [pc, #84]	; (8004b40 <pxCurrentTCBConst>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	f01e 0f10 	tst.w	lr, #16
 8004af0:	bf08      	it	eq
 8004af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afa:	6010      	str	r0, [r2, #0]
 8004afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b04:	f380 8811 	msr	BASEPRI, r0
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f7fe fe54 	bl	80037bc <vTaskSwitchContext>
 8004b14:	f04f 0000 	mov.w	r0, #0
 8004b18:	f380 8811 	msr	BASEPRI, r0
 8004b1c:	bc09      	pop	{r0, r3}
 8004b1e:	6819      	ldr	r1, [r3, #0]
 8004b20:	6808      	ldr	r0, [r1, #0]
 8004b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b26:	f01e 0f10 	tst.w	lr, #16
 8004b2a:	bf08      	it	eq
 8004b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b30:	f380 8809 	msr	PSP, r0
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	f3af 8000 	nop.w

08004b40 <pxCurrentTCBConst>:
 8004b40:	200000c8 	.word	0x200000c8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop

08004b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
        __asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	607b      	str	r3, [r7, #4]
    }
 8004b60:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004b62:	f7fe fd15 	bl	8003590 <xTaskIncrementTick>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b6c:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <SysTick_Handler+0x40>)
 8004b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	2300      	movs	r3, #0
 8004b76:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	f383 8811 	msr	BASEPRI, r3
    }
 8004b7e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004b80:	bf00      	nop
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	e000ed04 	.word	0xe000ed04

08004b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b90:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <vPortSetupTimerInterrupt+0x34>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b96:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <vPortSetupTimerInterrupt+0x38>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <vPortSetupTimerInterrupt+0x3c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a0a      	ldr	r2, [pc, #40]	; (8004bcc <vPortSetupTimerInterrupt+0x40>)
 8004ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba6:	099b      	lsrs	r3, r3, #6
 8004ba8:	4a09      	ldr	r2, [pc, #36]	; (8004bd0 <vPortSetupTimerInterrupt+0x44>)
 8004baa:	3b01      	subs	r3, #1
 8004bac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004bae:	4b04      	ldr	r3, [pc, #16]	; (8004bc0 <vPortSetupTimerInterrupt+0x34>)
 8004bb0:	2207      	movs	r2, #7
 8004bb2:	601a      	str	r2, [r3, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	e000e010 	.word	0xe000e010
 8004bc4:	e000e018 	.word	0xe000e018
 8004bc8:	20000000 	.word	0x20000000
 8004bcc:	10624dd3 	.word	0x10624dd3
 8004bd0:	e000e014 	.word	0xe000e014

08004bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004be4 <vPortEnableVFP+0x10>
 8004bd8:	6801      	ldr	r1, [r0, #0]
 8004bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004bde:	6001      	str	r1, [r0, #0]
 8004be0:	4770      	bx	lr
 8004be2:	0000      	.short	0x0000
 8004be4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004be8:	bf00      	nop
 8004bea:	bf00      	nop

08004bec <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00e      	beq.n	8004c20 <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f023 0307 	bic.w	r3, r3, #7
 8004c08:	3308      	adds	r3, #8
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d205      	bcs.n	8004c1c <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f023 0307 	bic.w	r3, r3, #7
 8004c16:	3308      	adds	r3, #8
 8004c18:	607b      	str	r3, [r7, #4]
 8004c1a:	e001      	b.n	8004c20 <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8004c20:	f7fe fb9c 	bl	800335c <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8004c24:	4b17      	ldr	r3, [pc, #92]	; (8004c84 <pvPortMalloc+0x98>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d105      	bne.n	8004c38 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8004c2c:	4b16      	ldr	r3, [pc, #88]	; (8004c88 <pvPortMalloc+0x9c>)
 8004c2e:	f023 0307 	bic.w	r3, r3, #7
 8004c32:	461a      	mov	r2, r3
 8004c34:	4b13      	ldr	r3, [pc, #76]	; (8004c84 <pvPortMalloc+0x98>)
 8004c36:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d01a      	beq.n	8004c74 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8004c3e:	4b13      	ldr	r3, [pc, #76]	; (8004c8c <pvPortMalloc+0xa0>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8004c46:	4a12      	ldr	r2, [pc, #72]	; (8004c90 <pvPortMalloc+0xa4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d813      	bhi.n	8004c74 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8004c4c:	4b0f      	ldr	r3, [pc, #60]	; (8004c8c <pvPortMalloc+0xa0>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	441a      	add	r2, r3
 8004c54:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <pvPortMalloc+0xa0>)
 8004c56:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d90b      	bls.n	8004c74 <pvPortMalloc+0x88>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8004c5c:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <pvPortMalloc+0x98>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <pvPortMalloc+0xa0>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4413      	add	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8004c68:	4b08      	ldr	r3, [pc, #32]	; (8004c8c <pvPortMalloc+0xa0>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4413      	add	r3, r2
 8004c70:	4a06      	ldr	r2, [pc, #24]	; (8004c8c <pvPortMalloc+0xa0>)
 8004c72:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004c74:	f7fe fb80 	bl	8003378 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8004c78:	68fb      	ldr	r3, [r7, #12]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20012e14 	.word	0x20012e14
 8004c88:	20000217 	.word	0x20000217
 8004c8c:	20012e10 	.word	0x20012e10
 8004c90:	00012bf7 	.word	0x00012bf7

08004c94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <vPortFree+0x24>
        __asm volatile
 8004ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	60fb      	str	r3, [r7, #12]
    }
 8004cb4:	bf00      	nop
 8004cb6:	e7fe      	b.n	8004cb6 <vPortFree+0x22>
}
 8004cb8:	bf00      	nop
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <memset>:
 8004cc4:	4402      	add	r2, r0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d100      	bne.n	8004cce <memset+0xa>
 8004ccc:	4770      	bx	lr
 8004cce:	f803 1b01 	strb.w	r1, [r3], #1
 8004cd2:	e7f9      	b.n	8004cc8 <memset+0x4>

08004cd4 <__libc_init_array>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	4d0d      	ldr	r5, [pc, #52]	; (8004d0c <__libc_init_array+0x38>)
 8004cd8:	4c0d      	ldr	r4, [pc, #52]	; (8004d10 <__libc_init_array+0x3c>)
 8004cda:	1b64      	subs	r4, r4, r5
 8004cdc:	10a4      	asrs	r4, r4, #2
 8004cde:	2600      	movs	r6, #0
 8004ce0:	42a6      	cmp	r6, r4
 8004ce2:	d109      	bne.n	8004cf8 <__libc_init_array+0x24>
 8004ce4:	4d0b      	ldr	r5, [pc, #44]	; (8004d14 <__libc_init_array+0x40>)
 8004ce6:	4c0c      	ldr	r4, [pc, #48]	; (8004d18 <__libc_init_array+0x44>)
 8004ce8:	f000 f826 	bl	8004d38 <_init>
 8004cec:	1b64      	subs	r4, r4, r5
 8004cee:	10a4      	asrs	r4, r4, #2
 8004cf0:	2600      	movs	r6, #0
 8004cf2:	42a6      	cmp	r6, r4
 8004cf4:	d105      	bne.n	8004d02 <__libc_init_array+0x2e>
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}
 8004cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfc:	4798      	blx	r3
 8004cfe:	3601      	adds	r6, #1
 8004d00:	e7ee      	b.n	8004ce0 <__libc_init_array+0xc>
 8004d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d06:	4798      	blx	r3
 8004d08:	3601      	adds	r6, #1
 8004d0a:	e7f2      	b.n	8004cf2 <__libc_init_array+0x1e>
 8004d0c:	08004dd0 	.word	0x08004dd0
 8004d10:	08004dd0 	.word	0x08004dd0
 8004d14:	08004dd0 	.word	0x08004dd0
 8004d18:	08004dd4 	.word	0x08004dd4

08004d1c <memcpy>:
 8004d1c:	440a      	add	r2, r1
 8004d1e:	4291      	cmp	r1, r2
 8004d20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004d24:	d100      	bne.n	8004d28 <memcpy+0xc>
 8004d26:	4770      	bx	lr
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d32:	4291      	cmp	r1, r2
 8004d34:	d1f9      	bne.n	8004d2a <memcpy+0xe>
 8004d36:	bd10      	pop	{r4, pc}

08004d38 <_init>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	bf00      	nop
 8004d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3e:	bc08      	pop	{r3}
 8004d40:	469e      	mov	lr, r3
 8004d42:	4770      	bx	lr

08004d44 <_fini>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	bf00      	nop
 8004d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4a:	bc08      	pop	{r3}
 8004d4c:	469e      	mov	lr, r3
 8004d4e:	4770      	bx	lr
